/* Generated By:JavaCC: Do not edit this line. GuardedCommandExpressionParserConstants.java */
package epmc.guardedcommand.expression;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GuardedCommandExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int A = 5;
  /** RegularExpression Id. */
  int BOOL = 6;
  /** RegularExpression Id. */
  int CEIL = 7;
  /** RegularExpression Id. */
  int CONSTANT = 8;
  /** RegularExpression Id. */
  int C = 9;
  /** RegularExpression Id. */
  int DISCOUNT = 10;
  /** RegularExpression Id. */
  int DOUBLE = 11;
  /** RegularExpression Id. */
  int E = 12;
  /** RegularExpression Id. */
  int FALSE = 13;
  /** RegularExpression Id. */
  int FORMULA = 14;
  /** RegularExpression Id. */
  int FILTER = 15;
  /** RegularExpression Id. */
  int FLOOR = 16;
  /** RegularExpression Id. */
  int FUNCTION = 17;
  /** RegularExpression Id. */
  int F = 18;
  /** RegularExpression Id. */
  int G = 19;
  /** RegularExpression Id. */
  int INIT = 20;
  /** RegularExpression Id. */
  int INITEND = 21;
  /** RegularExpression Id. */
  int INVARIANT_OPEN = 22;
  /** RegularExpression Id. */
  int INVARIANT_CLOSE = 23;
  /** RegularExpression Id. */
  int I = 24;
  /** RegularExpression Id. */
  int INT = 25;
  /** RegularExpression Id. */
  int LABEL = 26;
  /** RegularExpression Id. */
  int LOG = 27;
  /** RegularExpression Id. */
  int MAX = 28;
  /** RegularExpression Id. */
  int MIN = 29;
  /** RegularExpression Id. */
  int MOD = 30;
  /** RegularExpression Id. */
  int MODULEBEGIN = 31;
  /** RegularExpression Id. */
  int MODULEEND = 32;
  /** RegularExpression Id. */
  int POW = 33;
  /** RegularExpression Id. */
  int R = 34;
  /** RegularExpression Id. */
  int REWARDSBEGIN = 35;
  /** RegularExpression Id. */
  int REWARDSEND = 36;
  /** RegularExpression Id. */
  int RMAX = 37;
  /** RegularExpression Id. */
  int RMIN = 38;
  /** RegularExpression Id. */
  int SQRT = 39;
  /** RegularExpression Id. */
  int SYSTEMBEGIN = 40;
  /** RegularExpression Id. */
  int SYSTEMEND = 41;
  /** RegularExpression Id. */
  int TRUE = 42;
  /** RegularExpression Id. */
  int U = 43;
  /** RegularExpression Id. */
  int W = 44;
  /** RegularExpression Id. */
  int X = 45;
  /** RegularExpression Id. */
  int COND = 46;
  /** RegularExpression Id. */
  int PLUS = 47;
  /** RegularExpression Id. */
  int MINUS = 48;
  /** RegularExpression Id. */
  int TIMES = 49;
  /** RegularExpression Id. */
  int DIVIDE = 50;
  /** RegularExpression Id. */
  int ARROW = 51;
  /** RegularExpression Id. */
  int LBRACKET = 52;
  /** RegularExpression Id. */
  int RBRACKET = 53;
  /** RegularExpression Id. */
  int LPAR = 54;
  /** RegularExpression Id. */
  int RPAR = 55;
  /** RegularExpression Id. */
  int LCURL = 56;
  /** RegularExpression Id. */
  int RCURL = 57;
  /** RegularExpression Id. */
  int RENAME = 58;
  /** RegularExpression Id. */
  int SEMICOLON = 59;
  /** RegularExpression Id. */
  int COLON = 60;
  /** RegularExpression Id. */
  int COMMA = 61;
  /** RegularExpression Id. */
  int AND = 62;
  /** RegularExpression Id. */
  int OR = 63;
  /** RegularExpression Id. */
  int NOT = 64;
  /** RegularExpression Id. */
  int IMPLIES = 65;
  /** RegularExpression Id. */
  int IFF = 66;
  /** RegularExpression Id. */
  int QUESTION = 67;
  /** RegularExpression Id. */
  int PRIME = 68;
  /** RegularExpression Id. */
  int EQ = 69;
  /** RegularExpression Id. */
  int NEQ = 70;
  /** RegularExpression Id. */
  int LEQ = 71;
  /** RegularExpression Id. */
  int LT = 72;
  /** RegularExpression Id. */
  int GT = 73;
  /** RegularExpression Id. */
  int GEQ = 74;
  /** RegularExpression Id. */
  int QUOTE = 75;
  /** RegularExpression Id. */
  int SEPINTERVAL = 76;
  /** RegularExpression Id. */
  int SMG = 77;
  /** RegularExpression Id. */
  int COALITION_OPEN = 78;
  /** RegularExpression Id. */
  int COALITION_CLOSE = 79;
  /** RegularExpression Id. */
  int PLAYERBEGIN = 80;
  /** RegularExpression Id. */
  int PLAYEREND = 81;
  /** RegularExpression Id. */
  int IDENTIFIER = 82;
  /** RegularExpression Id. */
  int NUM_INT = 83;
  /** RegularExpression Id. */
  int NUM_REAL = 84;
  /** RegularExpression Id. */
  int COMMENT = 85;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 86;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"A\"",
    "\"bool\"",
    "\"ceil\"",
    "\"const\"",
    "\"C\"",
    "\"DISCOUNT\"",
    "\"double\"",
    "\"E\"",
    "\"false\"",
    "\"formula\"",
    "\"filter\"",
    "\"floor\"",
    "\"func\"",
    "\"F\"",
    "\"G\"",
    "\"init\"",
    "\"endinit\"",
    "\"invariant\"",
    "\"endinvariant\"",
    "\"I\"",
    "\"int\"",
    "\"label\"",
    "\"log\"",
    "\"max\"",
    "\"min\"",
    "\"mod\"",
    "\"module\"",
    "\"endmodule\"",
    "\"pow\"",
    "\"R\"",
    "\"rewards\"",
    "\"endrewards\"",
    "\"Rmax\"",
    "\"Rmin\"",
    "\"sqrt\"",
    "\"system\"",
    "\"endsystem\"",
    "\"true\"",
    "\"U\"",
    "\"W\"",
    "\"X\"",
    "\"given\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"->\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<-\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=>\"",
    "\"<=>\"",
    "\"?\"",
    "\"\\\'\"",
    "\"=\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\">=\"",
    "\"\\\"\"",
    "\"..\"",
    "\"smg\"",
    "\"<<\"",
    "\">>\"",
    "\"player\"",
    "\"endplayer\"",
    "<IDENTIFIER>",
    "<NUM_INT>",
    "<NUM_REAL>",
    "<COMMENT>",
    "<UNEXPECTED_CHAR>",
  };

}
