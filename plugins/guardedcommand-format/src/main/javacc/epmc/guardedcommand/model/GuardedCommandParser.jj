options
{
  JDK_VERSION = "1.8";
  LOOKAHEAD = 1;
  STATIC = false;
}

PARSER_BEGIN(GuardedCommandParser)
package epmc.guardedcommand.model;
import epmc.error.UtilError;
import epmc.guardedcommand.error.ProblemsGuardedCommand;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.graph.Semantics;
import epmc.value.ContextValue;
import epmc.expression.standard.UtilExpressionStandard;
import epmc.expression.Expression;
import epmc.expression.standard.ExpressionIdentifier;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionLiteral;
import epmc.guardedcommand.expression.GuardedCommandExpressionParser;
import epmc.main.options.UtilOptionsEPMC;
import epmc.guardedcommand.options.OptionsGuardedCommand;
import epmc.options.Options;
import epmc.value.OptionsValue;
import epmc.value.TypeInteger;
import epmc.value.ValueInteger;
import epmc.value.UtilValue;
import epmc.jani.model.type.JANIType;
import epmc.jani.model.type.JANITypeInt;
import epmc.jani.model.type.JANITypeReal;
import epmc.jani.model.type.JANITypeBool;
import epmc.jani.model.type.JANITypeBounded;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;

final class GuardedCommandParser {
	private ContextValue contextVal;
	private int sdcount = 0;
	private int modelcount = 0;
	private int initcount = 0;
	private final Set<String> moduleNames = new HashSet<String>();
	private final Set<String> playerNames = new HashSet<String>();
	private final Set<String> otherNames = new HashSet<String>();
	private final Set<String> rewardsNames = new HashSet<String>();
	private Token expressionToken;
	private ModelGuardedCommand model;

	public void setModel(ModelGuardedCommand model) {
		this.model = model;
		this.contextVal = model.getContextValue();
	}

	private void privSyntaxCheckModel() throws EPMCException, ParseException {
		SystemDefinition[] sd = new SystemDefinition[1]; 
		sd[0] = null;
		Expression[] init = new Expression[1];
		init[0] = null;
		Formulas formulae = new Formulas(contextVal);
		List<Module> modules = new ArrayList<Module>();
		Map<Expression, Expression> globalInitValues = new HashMap<Expression,Expression>();
		List<RewardStructure> rewards = new ArrayList<RewardStructure>();
		List<PlayerDefinition> players = new ArrayList<PlayerDefinition>();

		Token t = actualParser(sd, init, formulae, modules, globalInitValues, rewards, players);
		ensure(!modules.isEmpty(), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_NO_MODULE, newPositional(t.beginLine, t.beginColumn));
	}

	public ModelGuardedCommand parseModel(ContextValue contextValue) throws EPMCException {
	    Options options = contextValue.getOptions();
		this.contextVal = contextValue;
		try {
			return privParseModel(options);
		} catch (ParseException pe) {
			Token errorToken = getToken(1);
			ensure(errorToken.kind != UNEXPECTED_CHAR, ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_UNEXPECTED_CHARACTER, newPositional(errorToken.endLine, errorToken.endColumn), errorToken.image);
			ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_SYNTAX_ERROR, newPositional(errorToken.beginLine, errorToken.beginColumn), errorToken.toString());
			return null;			
		} catch (EPMCException e) {
		   throw e;
		}
		 catch (Throwable t) {
		   ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_GENERAL_ERROR, t, t);
		   return null;
		}
	}

	public ModelGuardedCommand parseModel(ContextValue contextVal, boolean flatten) throws EPMCException {
		Options options = UtilOptionsEPMC.newOptions();
		options.set(OptionsGuardedCommand.GUARDEDCOMMAND_FLATTEN, flatten);
		return parseModel(contextVal);
	}

	private ModelGuardedCommand privParseModel(Options options) throws EPMCException, ParseException {
		SystemDefinition[] sd = new SystemDefinition[1]; 
		sd[0] = null;
		Expression[] init = new Expression[1];
		init[0] = null;
		Formulas formulae = new Formulas(contextVal);
		List<Module> modules = new ArrayList<Module>();
		Map<Expression, Expression> globalInitValues = new HashMap<Expression,Expression>();
		List<RewardStructure> rewards = new ArrayList<RewardStructure>();
		List<PlayerDefinition> players = new ArrayList<PlayerDefinition>();

		Token t = actualParser(sd, init, formulae, modules, globalInitValues, rewards, players);
		ensure(!modules.isEmpty(), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_NO_MODULE, newPositional(t.beginLine, t.beginColumn));
		try {
		  ModelGuardedCommand result;
		  if (this.model == null) {
			result = new ModelGuardedCommand();
		  result.setContext(contextVal);
	      } else {
	        result = this.model;
	      }
			result.build(new ModelGuardedCommand.Builder()
			  .setModules(modules)
			  .setInitialStates(init[0])
			  .setGlobalInitValues(globalInitValues)
			  .setSystem(sd[0])
			  .setFormulas(formulae)
			  .setRewards(rewards)
			  .setPlayers(players));
			return result;
		} catch (EPMCException ime) {
			throw ime;
		}
		// catch (Throwable thr) {
		//	throw new EPMCRuntimeException(ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_INTERNAL_ERROR, thr);
		//}
	}

    private ValueInteger newValueInteger(String string) throws EPMCException {
      assert string != null;
      return UtilValue.newValue(TypeInteger.get(contextVal), string);
   }

    private static Positional newPositional(long line, long column) {
        return new Positional.Builder()
                .setLine(line)
                .setColumn(column)
                .build();
  }
}

PARSER_END(GuardedCommandParser)

TOKEN_MGR_DECLS : {
	int nestingLevel;
}

<*> SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : // RESERVED KEYWORDS
{
	< A : "A" >
|	< BOOL : "bool" >
|	< CEIL : "ceil" >
|	< CONSTANT : "const" >
|	< C : "C" >
|	< DOUBLE : "double" >
|	< E : "E" >
|	< FALSE : "false" >
|	< FORMULA : "formula" >
|	< FILTER : "filter" >
|	< FLOOR : "floor" >
|	< FUNCTION : "func" >
|	< F : "F" >
|	< G : "G" >
|	< INIT : "init" >
//|	< INITEND : "endinit" >
|	< INVARIANT_OPEN : "invariant" > : INVARIANT_ENV
//|	< INVARIANT_CLOSE : "endinvariant" >
|	< I : "I" >
|	< INT : "int" >
|	< LABEL : "label" >
|	< LOG : "log" >
|	< MAX : "max" >
|	< MIN : "min" >
|	< MOD : "mod" >
|	< MODULEBEGIN : "module" >
|	< MODULEEND : "endmodule" >
|	< POW : "pow" >
|	< REWARDSBEGIN : "rewards" >
|	< REWARDSEND : "endrewards" >
|	< SQRT : "sqrt" >
|	< SYSTEMBEGIN : "system" >
|	< SYSTEMEND : "endsystem" >
|	< TRUE : "true" >
|	< U : "U" >
|	< W : "W" >
|	< X : "X" >
|	< COND : "given" >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< TIMES : "*" >
|	< DIVIDE : "/" >
//|	< ARROW : "->" >
|	< LBRACKET : "[" >
|	< RBRACKET : "]" >
|	< LPAR : "(" >
|	< RPAR : ")" >
|	< LCURL : "{" >
|	< RCURL : "}" >
|	< RENAME : "<-" >
|	< SEMICOLON : ";" >
|	< COLON : ":" >
|	< COMMA : "," >
|	< AND : "&" >
|	< OR : "|" >
|	< NOT : "!" >
|	< IMPLIES : "=>" >
|	< IFF : "<=>" >
|	< QUESTION : "?" >
|	< PRIME : "'" >
|	< EQ : "=" >
|	< NEQ : "!=" >
|	< LEQ : "<=" >
|	< LT : "<" >
|	< GT : ">" >
|	< GEQ : ">=" >
|	< QUOTE : "\"" >
//|	< SEPINTERVAL : ".." >
// game stuff
|	< SMG : "smg" >
|	< COALITION_OPEN : "<<" >
|	< COALITION_CLOSE : ">>" >
|	< PLAYERBEGIN : "player" >
|	< PLAYEREND : "endplayer" >
|	< IDENTIFIER : [ "A"-"Z","a"-"z","_" ] ( [ "A"-"Z","a"-"z","_","0"-"9" ] )* >
|	< NUM_INT : (["1"-"9"](["0"-"9"])*)|("0") >
|	< NUM_REAL : (["0"-"9"])+(".")?(["0"-"9"])+(["e","E"](["-","+"])?(["0"-"9"])+)? >
}

< ARROW_ENV > TOKEN : {
	< ARROW_ARROW : "->" > : UPDATE_ENV
|	< ARROW_ARG : (~["-"] | "-" ~[">"] )+ >
}

< SEPINTERVAL_ENV > TOKEN : {
	< SEPINTERVAL_SEPINTERVAL : ".." > : DEFAULT
|	< SEPINTERVAL_ARG : (~["."] | "." ~["."] )+ >
}

< INVARIANT_ENV > TOKEN : {
	< INVARIANT_CLOSE : "endinvariant" > : DEFAULT
|	< INVARIANT_IDENTIFIER: [ "A"-"Z","a"-"z","_" ] ( [ "A"-"Z","a"-"z","_","0"-"9" ] )* >
|	< INVARIANT_OTHER: ( ~[ "A"-"Z","a"-"z","_" ] )+ >
//|	< INVARIANT_OTHER : ([ "0"-"9", "+", "-", "*", "/", "<", ">", "=", ";", ",", ":", ".", "?", "'", "\"", "!", "&", "|", "(", ")", "{", "}", "[", "]", " ", "\r", "\n", "\t" ])+ >
}

< INIT_ENV > TOKEN : {
	< INIT_CLOSE : "endinit" > : DEFAULT
|	< INIT_IDENTIFIER: [ "A"-"Z","a"-"z","_" ] ( [ "A"-"Z","a"-"z","_","0"-"9" ] )* >
|	< INIT_OTHER: ( ~[ "A"-"Z","a"-"z","_" ] )+ >
//|	< INIT_OTHER : ([ "0"-"9", "+", "-", "*", "/", "<", ">", "=", ";", ",", ":", ".", "?", "'", "\"", "!", "&", "|", "(", ")", "{", "}", "[", "]", " ", "\r", "\n", "\t" ])+ >
}

< NESTING_SEMICOLON > TOKEN : {
	< NESTING_SEMICOLON_SEMICOLON : ";" > : DEFAULT
|	< NESTING_SEMICOLON_OTHER : (~[";","["])+ >
|	< NESTING_SEMICOLON_BRACKET_OPEN : "[" > { nestingLevel++; } : NESTING_SEMICOLON_INNER
}

< NESTING_SEMICOLON_INNER > TOKEN : {
	< NESTING_SEMICOLON_INNER_OTHER : (~["[","]"])+ >
|	< NESTING_SEMICOLON_INNER_BRACKET_OPEN : "[" > { nestingLevel++; }
|	< NESTING_SEMICOLON_INNER_BRACKET_CLOSE : "]" > { nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_SEMICOLON); }
}

< NESTING_BRACKET > TOKEN : {
	< NESTING_BRACKET_RBRACKET : "]" > : DEFAULT
|	< NESTING_BRACKET_OTHER : (~["]","["])+ >
|	< NESTING_BRACKET_BRACKET_OPEN : "[" > { nestingLevel++; } : NESTING_BRACKET_INNER
}

< NESTING_BRACKET_INNER > TOKEN : {
	< NESTING_BRACKET_INNER_OTHER : (~["[","]"])+ >
|	< NESTING_BRACKET_INNER_BRACKET_OPEN : "[" > { nestingLevel++; }
|	< NESTING_BRACKET_INNER_BRACKET_CLOSE : "]" > { nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_BRACKET); }
}

< NESTING_PAR > TOKEN : {
	< NESTING_PAR_RPAR : ")" > : DEFAULT
|	< NESTING_PAR_OTHER : (~["(",")"])+ >
|	< NESTING_PAR_PAR_OPEN : "(" > { nestingLevel++; } : NESTING_PAR_INNER
}

<UPDATE_ENV > TOKEN : {
	< UPDATE_TRUE : "true" >
|	< UPDATE_LPAR : "(" >
|	< UPDATE_SEMICOLON : ";" > : DEFAULT
|	< UPDATE_PRIME : "'" >
|	< UPDATE_EQ : "=" > : NESTING_PAR
|	< UPDATE_PLUS : "+" > : NESTING_COLON
|	< UPDATE_AND : "&" >
|	< UPDATE_IDENTIFIER : [ "A"-"Z","a"-"z","_" ] ( [ "A"-"Z","a"-"z","_","0"-"9" ] )* >
|	< UPDATE_OTHER : ~[] > : NESTING_COLON
}

< NESTING_PAR_INNER > TOKEN : {
	< NESTING_PAR_INNER_OTHER : (~["(",")"])+ >
|	< NESTING_PAR_INNER_PAR_OPEN : "(" > { nestingLevel++; }
|	< NESTING_PAR_INNER_PAR_CLOSE : ")" > { nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_PAR); }
}

< NESTING_COLON > TOKEN : {
	< NESTING_COLON_COLON : ":" > : DEFAULT
|	< NESTING_COLON_OTHER : (~[":","?"])+ >
|	< NESTING_COLON_QUESTION : "?" > { nestingLevel++; } : NESTING_COLON_INNER
}

< NESTING_COLON_INNER > TOKEN : {
	< NESTING_COLON_INNER_OTHER : (~["?",":"])+ >
|	< NESTING_COLON_INNER_QUESTION : "?" > { nestingLevel++; }
|	< NESTING_COLON_INNER_COLON : ":" > { nestingLevel--; if (nestingLevel <= 0) SwitchTo(NESTING_COLON); }
}


<*> SPECIAL_TOKEN :
{
//	< COMMENT : "//"(~["\n","\r"])*("\n"|"\r"|"\r\n") >
	< COMMENT : "//"(~["\n","\r"])* >
}

TOKEN :
{
	< UNEXPECTED_CHAR : ~[] >
}


private Token actualParser(SystemDefinition[] sd, Expression[] init, Formulas formulae, List<Module> modules, Map<Expression, Expression> globalInitValues, List<RewardStructure> rewards, List<PlayerDefinition> players) throws EPMCException :
{
	Token t;
}
{
	(
		parseConstant(formulae)
	|
		parseLabel(formulae)
	|
		parseFormula(formulae)
	|
		parseModule(modules)
	|
		parseRewards(rewards)
	|
		parsePlayer(players)
	|
		init[0] = parseInit()
	|
		sd[0] = parseSystem()
	)*
	t = <EOF>
	{ return t; }
}

private void parseConstant(Formulas formulae) throws EPMCException :
{
	Expression id, value = null;
	JANIType type;
	Token idt;
}
{	
	(
		(
			<CONSTANT>
			{ type = new JANITypeInt();
			type.setContextValue(contextVal); }
			(
				<INT>
				{ type = new JANITypeInt();
				type.setContextValue(contextVal); }
			|
				<DOUBLE>
				{ type = new JANITypeReal();
				type.setContextValue(contextVal); }
			|
				<BOOL>
				{ type = new JANITypeBool();
				type.setContextValue(contextVal);	} 
			)? //if missing, it corresponds to CONST INT, so covered by the initial assignment...
		)
		{ idt = getToken(1); }
		id = parseIdentifier()
		(
			<EQ>
			value = parseExpSemicolon()
			<NESTING_SEMICOLON_SEMICOLON>
		|
			<SEMICOLON>
		)
		{ 
			String ids = id.toString();
			ensure(!otherNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_CONSTANT, newPositional(idt.beginLine, idt.beginColumn), ids);
			otherNames.add(ids);
			formulae.addConstant(ids, value, type); 
		}
	)
}


private Expression parseIdentifier() throws EPMCException :
{
	Token literal;
}
{
	literal = <IDENTIFIER>
	{ return new ExpressionIdentifierStandard.Builder()
		.setName(literal.toString())
		.build(); }
}

private Expression parseInt() throws EPMCException :
{
	Token intg;
}
{
	intg = <NUM_INT>
	{ return new ExpressionLiteral.Builder()
		.setValue(newValueInteger(intg.toString()))
		.build();
	}
}

private void parseLabel(Formulas formulae) throws EPMCException :
{
	Expression id, value;
	Token t, tid;
	String ids;
}
{	
	<LABEL>
	t = <QUOTE> 
	tid = <IDENTIFIER> 
	<QUOTE>
	{ 
		ids = "\"" + tid.toString() + "\"";
		id = new ExpressionIdentifierStandard.Builder()
			.setName(ids)
			.build(); 
	}
	<EQ>
	value = parseExpSemicolon()
	<NESTING_SEMICOLON_SEMICOLON>
	{
	    ensure(!otherNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_LABEL, newPositional(t.beginLine, t.beginColumn), ids);
		otherNames.add(ids);
		formulae.addLabel(ids, value); 
	}
}

private void parseFormula(Formulas formulae) throws EPMCException :
{
	Expression id, value;
	Token t;
}
{	
	<FORMULA>
	t = <IDENTIFIER>
	{ id = new ExpressionIdentifierStandard.Builder()
		.setName(t.toString())
		.build(); } 
	<EQ>
	value = parseExpSemicolon() 
	<NESTING_SEMICOLON_SEMICOLON>
	{ 
		String ids = id.toString();
		ensure(!otherNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_FORMULA, newPositional(t.beginLine, t.beginColumn), ids);
		otherNames.add(ids);
		formulae.addFormula(id.toString(), value); 
	}
}

private void parsePlayer(List<PlayerDefinition> players) throws EPMCException :
{
	Token item;
	Set<String> modules = new HashSet<String>();
	Set<String> actions = new HashSet<String>();
	Token id;
	Token playerBegin;
	String ids;
}
{
	playerBegin = <PLAYERBEGIN>
	id = <IDENTIFIER>
	{ 
		ids = id.toString();
	}
	(
		item = <IDENTIFIER>
		{ modules.add(item.toString()); }
	|
		<LBRACKET>
		item = <IDENTIFIER>
		<RBRACKET>
		{ actions.add(item.toString()); }
	)
	(
		<COMMA>
		(
			item = <IDENTIFIER>
			{ modules.add(item.toString()); }
		|
			<LBRACKET>
			item = <IDENTIFIER>
			<RBRACKET>
			{ actions.add(item.toString()); }
		)
	)*
	<PLAYEREND>
	{
	    ensure(!playerNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_PLAYER, newPositional(id.beginLine, id.beginColumn), ids);
		playerNames.add(ids);
		players.add(new PlayerDefinition(ids, modules, actions, newPositional(playerBegin.beginLine, playerBegin.beginColumn))); 
	}
}

private void parseModule(List<Module> modules) throws EPMCException :
{
	Module m;
	Expression id;
	Map<Expression, JANIType> variables = new HashMap<Expression,JANIType>();
	Map<Expression, Expression> initValues = new HashMap<Expression,Expression>();
	Expression[] invariants = new Expression[1];
	List<Command> commands = new ArrayList<Command>();
	Token t;
	String ids;
}
{
	<MODULEBEGIN>
	t = <IDENTIFIER>
	{ 
		ids = t.toString();
		id = new ExpressionIdentifierStandard.Builder()
			.setName(ids)
			.build();
	}
	(
		<EQ>
		m = parseModuleRename(id)
	|
		parseModuleContent(variables, initValues, invariants, commands)
		{ m = new ModuleCommands(contextVal, id.toString(), variables, initValues, commands, invariants[0], null); }
	)
	<MODULEEND>
	{
	    ensure(!moduleNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_MODULE, newPositional(t.beginLine, t.beginColumn), ids);
		moduleNames.add(ids);
		modules.add(m); 
	}
}

private Module parseModuleRename(Expression newId) throws EPMCException :
{
	Expression oldId;
	Map<Expression, Expression> map = new HashMap<Expression,Expression>();
}
{
	oldId = ExpressionIdentifier()
	<LBRACKET>
	parseRenaming(map) 
	(
		<COMMA>
		parseRenaming(map)
	)*
	<RBRACKET>
	{ return new ModuleRename(newId, oldId, map, null); }
}

private void parseRenaming(Map<Expression, Expression> map) throws EPMCException :
{
	Expression oldId;
	Expression newId;
}
{
	oldId = ExpressionIdentifier()
	<EQ>
	newId = ExpressionIdentifier()
	{ map.put(oldId, newId); }
}

private void parseModuleContent(Map<Expression,JANIType> variables, Map<Expression,Expression> initValues, Expression[] invariants, List<Command> commands) throws EPMCException :
{
	Command c;
}
{
	(
		parseVariableDeclaration(variables, initValues)
	)*
	(
		invariants[0] = parseInvariantDeclaration()
	)?
	(
		c = parseGuardedCommandDeclaration()
		{ commands.add(c); }
	)*	
}

private void parseVariableDeclaration(Map<Expression, JANIType> variables, Map<Expression, Expression> initValues) throws EPMCException :
{
	Expression id;
	JANIType type;
	Expression initValue = null;
	Token t;
	String ids;
}
{
	t = <IDENTIFIER>
	{ 
		ids = t.toString();
		id = new ExpressionIdentifierStandard.Builder()
			.setName(ids)
			.build();
	}
	<COLON>
	type = parseVariable()
	(
		<INIT>
		initValue = parseExpSemicolon()
		<NESTING_SEMICOLON_SEMICOLON>
	|
		<SEMICOLON>
	)
	{
	    ensure(!otherNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_VARIABLE, newPositional(t.beginLine, t.beginColumn), ids);
		otherNames.add(ids);
		variables.put(id, type);
		if (initValue != null) {
			initValues.put(id, initValue);
		}
	}
}

private JANIType parseVariable() throws EPMCException :
{
	JANIType type;
	Expression low, high;
}
{
	(
		<BOOL> 
		{ type = new JANITypeBool();
		type.setContextValue(contextVal); }
//	|
//		<INT> 
//		{ type = VariableType.getInteger(); }
	|
		<LBRACKET>
		low = parseExpSepinterval()
		<SEPINTERVAL_SEPINTERVAL>
		high = parseExpBrack()
		<NESTING_BRACKET_RBRACKET>
		{ JANITypeBounded typeBounded = new JANITypeBounded();
		typeBounded.setContextValue(contextVal);
		typeBounded.setLowerBound(low);
		typeBounded.setUpperBound(high);
		type = typeBounded; }
	)
	{ return type; }
}

private Expression parseInvariantDeclaration() throws EPMCException :
{
	Expression invar;
}
{
	<INVARIANT_OPEN>
	invar = parseExpInvariant()
	<INVARIANT_CLOSE>
	{ token_source.SwitchTo(DEFAULT); }
	{ return invar; }
}

private void parseRewards(List<RewardStructure> rewards) throws EPMCException :
{
	Expression id = null;
	Expression label;
	Expression guard;
	Expression value;
	List<Reward> locRew = new ArrayList<Reward>();
	Token t;
	String ids;
}
{
	<REWARDSBEGIN>
	( 
		LOOKAHEAD(<QUOTE>) 
		<QUOTE>
		t = <IDENTIFIER>
		<QUOTE>
		{
			ids = "\"" + t.toString() + "\"";
			id = new ExpressionIdentifierStandard.Builder()
				.setName(ids)
				.build();
			ensure(!rewardsNames.contains(ids), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_REWARD, newPositional(t.beginLine, t.beginColumn), ids);
		}
	)?
	{
		if (id == null) {
			id = new ExpressionIdentifierStandard.Builder()
				.setName("")
				.build();
		}
	}
	(
		{ label = null; }
		(
			<LBRACKET>
			( 
				t = <IDENTIFIER>
				{ label = new ExpressionIdentifierStandard.Builder()
					.setName(t.toString())
					.build(); }
			)?
			<RBRACKET>
		)?
		{ token_source.SwitchTo(NESTING_COLON); }
		{ expressionToken = getToken(1); } 
		{ t = null; }
		(
			t = <TRUE>
		|
			t = <FALSE>
		|
			t = <IDENTIFIER>
		|
			t = <LPAR>
		|
			t = <MINUS>
		|
			t = <NOT>
		)?
		guard = parseExpColon(t)
		{ token_source.SwitchTo(NESTING_SEMICOLON); }
		<NESTING_COLON_COLON>
		value = parseExpSemicolon()
		<NESTING_SEMICOLON_SEMICOLON>
		{ 
			if (label == null) {
				locRew.add(new StateReward(guard, value, null));
			} else {
				locRew.add(new TransitionReward(label.toString(), guard, value, null));
			}
		}
	)+
	<REWARDSEND>
	{
		ids = id.toString();
		rewardsNames.add(ids);
		rewards.add(new RewardStructure(ids, locRew, null)); 
	}
}

private Expression parseInit() throws EPMCException :
{
	Expression init;
	Token t;
}
{
	t = <INIT>
	init = parseExpInit()
	<INIT_CLOSE>
	{ 
		initcount++;
		ensure(initcount <= 1, ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_MULTIPLE_INIT, newPositional(t.beginLine, t.beginColumn));
		return init;
	}
}

private SystemDefinition parseSystem() throws EPMCException :
{
	SystemDefinition sd;
	Token t;
}
{
	t = <SYSTEMBEGIN>
	sd = parseSystemContent()
	<SYSTEMEND>
	{ 
		sdcount++;
		ensure(sdcount <= 1, ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_MULTIPLE_SYSTEM, newPositional(t.beginLine, t.beginColumn));
		return sd;
	}
}

private SystemDefinition parseSystemContent() throws EPMCException :
{
	SystemDefinition sd;
}
{
	sd = parseSystemParallelCommonActions()
	{ return sd; }
}

private SystemDefinition parseSystemParallelCommonActions() throws EPMCException :
{
	SystemDefinition sd;
	SystemDefinition other;
}
{
	sd = parseSystemParallelAsynchronous()
	( 
		LOOKAHEAD(<OR> <OR>) 
		<OR> 
		<OR> 
		other = parseSystemParallelSetActions()
		{ sd = new SystemAlphaParallel(sd, other, null); }
	)* 
	{ return sd; }
}

private SystemDefinition parseSystemParallelAsynchronous() throws EPMCException :
{
	SystemDefinition sd;
	SystemDefinition other;
}
{
	sd = parseSystemParallelSetActions()
	( 
		LOOKAHEAD(<OR> <OR> <OR>) 
		<OR>
		<OR> 
		<OR>  
		other = parseSystemParallelCommonActions()
		{ sd = new SystemAsyncParallel(sd, other, null); }
	)* 
	{ return sd; }
}

private SystemDefinition parseSystemParallelSetActions() throws EPMCException :
{
	SystemDefinition sd;
	SystemDefinition other;
	Set<Expression> idSet;
}
{
	sd = parseSystemRenHid()
	( 
		LOOKAHEAD(<OR> <LBRACKET>)
		<OR> 
		<LBRACKET> 
		idSet = parseIdSet()
		<RBRACKET>
		<OR> 
		other = parseSystemRenHid()
		{ sd = new SystemRestrictedParallel(sd, other, idSet, null); }
	)?
	{ return sd; }
}

private SystemDefinition parseSystemRenHid() throws EPMCException :
{
	SystemDefinition sd;
	Set<Expression> idSet;
	Map<Expression, Expression> renMap;
}
{
	sd = parseSystemBase()
	(
		<DIVIDE> 
		<LCURL> 
		idSet = parseIdSet() 
		<RCURL>
		{ sd = new SystemHide(sd, idSet, null); }
	|
		<LCURL>
		renMap = parseRenameMap()
		<RCURL>
		{ sd = new SystemRename(sd, renMap, null); }
	)*
	{ return sd; }
}

private Map<Expression, Expression> parseRenameMap() throws EPMCException :
{
	Map<Expression, Expression> map = new HashMap<Expression,Expression>();
	Expression oldId, newId;
}
{
	oldId = ExpressionIdentifier()
	<RENAME>
	newId = ExpressionIdentifier()
	{ map.put(oldId, newId); }
	(
		<COMMA>
		oldId = ExpressionIdentifier()
		<RENAME>
		newId = ExpressionIdentifier()
		{ map.put(oldId, newId); }
	)*
	{ return map; }
}

private Set<Expression> parseIdSet() throws EPMCException :
{
	Set<Expression> le = new HashSet<Expression>();
	Expression e;
}
{
	e = ExpressionIdentifier()
	{ le.add(e); }
	(
		<COMMA>
		e = ExpressionIdentifier()
		{ le.add(e);}
	)*
	{ return le; }
}

private SystemDefinition parseSystemBase() throws EPMCException :
{
	Expression e;
	SystemDefinition sd;
}
{
	(
		e = ExpressionIdentifier()
		{ sd = new SystemModule(e.toString(), null); }
	|
		<LPAR>
		sd = parseSystemParallelCommonActions()
		<RPAR>
	)
	{ return sd; }
}

private Command parseGuardedCommandDeclaration() throws EPMCException, EPMCException :
{
	Token literal;
	Expression identifier = null;
	Expression guard;
	List<Alternative> updates;
}
{
	<LBRACKET>
	( 
		(
			literal = <IDENTIFIER>
		)
		{ identifier = new ExpressionIdentifierStandard.Builder()
			.setName(literal.toString())
			.build(); }
	)?
	{ 
		if (identifier == null) {
			identifier = new ExpressionIdentifierStandard.Builder()
				.setName("")
				.build();
		}
	}
	<RBRACKET>
	guard = parseCondition()
	<ARROW_ARROW>
	updates = parseUpdate()
	{ token_source.SwitchTo(DEFAULT); }
	(
		<UPDATE_SEMICOLON>
	|
		<SEMICOLON>
	)
	{ return new Command(identifier, guard, updates, null); }
}

private List<Alternative> parseUpdate() throws EPMCException, EPMCException : 
{
	List<Alternative> updates = new ArrayList<Alternative>();
}
{
	(
		LOOKAHEAD(<UPDATE_TRUE>)
		parseDetUpdate(updates) 
	|
		LOOKAHEAD(<UPDATE_LPAR> <UPDATE_IDENTIFIER> <UPDATE_PRIME>) 
		parseDetUpdate(updates) 
	|	
		parseMultipleUpdate(updates)
	)
	{ return updates; }
}

private void parseMultipleUpdate(List<Alternative> updates) throws EPMCException, EPMCException : 
{
	Token t;
}
{
	{ token_source.SwitchTo(NESTING_COLON); }
	{ expressionToken = getToken(1); } 
	(
		t = <UPDATE_OTHER>
	|	
		t = <UPDATE_LPAR>
	|	
		t = <UPDATE_IDENTIFIER>
	|	
		t = <UPDATE_TRUE>
	)
	{ token_source.SwitchTo(UPDATE_ENV); }
	<NESTING_COLON_COLON>
	parseDetUpdate(updates) 
	(
		<UPDATE_PLUS>
		{ expressionToken = getToken(1); } 
		{ token_source.SwitchTo(UPDATE_ENV); }
		<NESTING_COLON_COLON>
		parseDetUpdate(updates)
	)*
}

private void parseDetUpdate(List<Alternative> updates) throws EPMCException, EPMCException :
{
	Expression id, value;
	Map<Expression, Expression> effect = new HashMap<Expression,Expression>();
	Token t;
}
{
	(
		<UPDATE_TRUE>
	|
		<UPDATE_LPAR>
		t = <UPDATE_IDENTIFIER>
		{ id = new ExpressionIdentifierStandard.Builder()
			.setName(t.toString())
			.build(); } 
		<UPDATE_PRIME>
		<UPDATE_EQ>
		value = parseExpParenth() 
		{ token_source.SwitchTo(UPDATE_ENV); }
		<NESTING_PAR_RPAR>
		{
		    ensure(!effect.containsKey(id), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_UPDATE, newPositional(t.beginLine, t.beginColumn), t);
			effect.put(id, value); 
		}
		(
			<UPDATE_AND>
			<UPDATE_LPAR>
			t = <UPDATE_IDENTIFIER>
			{ id = new ExpressionIdentifierStandard.Builder()
				.setName(t.toString())
				.build(); } 
			<UPDATE_PRIME>
			<UPDATE_EQ>
			value = parseExpParenth() 
			{ token_source.SwitchTo(UPDATE_ENV); }
			<NESTING_PAR_RPAR>
			{   ensure(!effect.containsKey(id), ProblemsGuardedCommand.GUARDEDCOMMAND_PARSER_REPEATED_UPDATE, newPositional(t.beginLine, t.beginColumn), t.toString());
				effect.put(id, value); 
			}
		)*
	)
	{ token_source.SwitchTo(UPDATE_ENV); }
	{ updates.add(new Alternative(effect, null)); }
}

private Expression parseCondition() throws EPMCException, EPMCException : 
{
	Expression e;
	token_source.SwitchTo(ARROW_ENV);
}
{
	e = parseExpArrow()
	{ return e; }
}

private Expression parseExpSemicolon() throws EPMCException : 
{
	Token t;
	StringBuilder exp = new StringBuilder();
	Expression expression = null;
	token_source.nestingLevel = 0; 
	token_source.SwitchTo(NESTING_SEMICOLON);
}
{
	{ expressionToken = getToken(1); } 
	(
		t = <NESTING_SEMICOLON_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_SEMICOLON_BRACKET_OPEN>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_SEMICOLON_INNER_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_SEMICOLON_INNER_BRACKET_OPEN>
		{exp.append(t.toString()); }
	|
		t = <NESTING_SEMICOLON_INNER_BRACKET_CLOSE>
		{ exp.append(t.toString()); }
	)*
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(exp.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn);
	}
}

private Expression parseExpParenth() throws EPMCException : 
{
	Token t;
	StringBuilder exp = new StringBuilder();
	Expression expression = null;
	token_source.nestingLevel = 0; 
	token_source.SwitchTo(NESTING_PAR);
}
{
	{ expressionToken = getToken(1); } 
	(
		t = <NESTING_PAR_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_PAR_PAR_OPEN>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_PAR_INNER_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_PAR_INNER_PAR_OPEN>
		{exp.append(t.toString()); }
	|
		t = <NESTING_PAR_INNER_PAR_CLOSE>
		{ exp.append(t.toString()); }
	)+
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(exp.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpBrack() throws EPMCException : 
{
	Token t;
	StringBuilder exp = new StringBuilder();
	Expression expression = null;
	token_source.nestingLevel = 0; 
	token_source.SwitchTo(NESTING_BRACKET);
}
{
	{ expressionToken = getToken(1); } 
	(
		t = <NESTING_BRACKET_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_BRACKET_BRACKET_OPEN>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_BRACKET_INNER_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_BRACKET_INNER_BRACKET_OPEN>
		{exp.append(t.toString()); }
	|
		t = <NESTING_BRACKET_INNER_BRACKET_CLOSE>
		{ exp.append(t.toString()); }
	)+
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(exp.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpColon(Token old) throws EPMCException : 
{
	Token t;
	StringBuilder exp = new StringBuilder();
	if (old != null) {
		exp.append(old.toString());
	}
	Expression expression = null;
	token_source.nestingLevel = 0; 
	token_source.SwitchTo(NESTING_COLON);
}
{
	(
		t = <UPDATE_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <UPDATE_LPAR>
		{ exp.append(t.toString()); }
	|
		t = <UPDATE_IDENTIFIER>
		{ exp.append(t.toString()); }
	|
		t = <UPDATE_TRUE>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_COLON_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_COLON_QUESTION>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_COLON_INNER_OTHER>
		{ exp.append(t.toString()); }
	|
		t = <NESTING_COLON_INNER_QUESTION>
		{exp.append(t.toString()); }
	|
		t = <NESTING_COLON_INNER_COLON>
		{ exp.append(t.toString()); }
	)*
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(exp.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpInvariant() throws EPMCException :
{
	StringBuilder content = new StringBuilder();
	Token t;
}
{
	{ expressionToken = getToken(1); }
	(	    t = <INVARIANT_IDENTIFIER>
	    { content.append(t.toString()); }
	|
	    t = <INVARIANT_OTHER>
	    { content.append(t.toString()); }
	)*
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(content.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpInit() throws EPMCException :
{
	StringBuilder content = new StringBuilder();
	Token t;
	token_source.SwitchTo(INIT_ENV);
}
{
	{ expressionToken = getToken(1); } 
	(
	    t = <INIT_IDENTIFIER>
	    { content.append(t.toString()); }
	|
	    t = <INIT_OTHER>
	    { content.append(t.toString()); }
	)*
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(content.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpSepinterval() throws EPMCException :
{
	Token content;
	token_source.SwitchTo(SEPINTERVAL_ENV);
}
{
	{ expressionToken = getToken(1); } 
	content = <SEPINTERVAL_ARG>
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(content.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression parseExpArrow() throws EPMCException :
{
	Token content;
	token_source.SwitchTo(ARROW_ENV);
}
{
	{ expressionToken = getToken(1); } 
	content = <ARROW_ARG>
	{
		GuardedCommandExpressionParser ep = new GuardedCommandExpressionParser(new StringReader(content.toString()));
		return ep.parseExpression(contextVal, expressionToken.beginLine, expressionToken.beginColumn); 
	}
}

private Expression ExpressionIdentifier() throws EPMCException :
{
	Token literal;
}
{
	literal = <IDENTIFIER>
	{ return new ExpressionIdentifierStandard.Builder()
		.setName(literal.toString())
		.build(); }
}


