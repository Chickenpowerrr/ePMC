/* Generated By:JavaCC: Do not edit this line. GuardedCommandParserConstants.java */
package epmc.guardedcommand.model;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GuardedCommandParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int A = 5;
  /** RegularExpression Id. */
  int BOOL = 6;
  /** RegularExpression Id. */
  int CEIL = 7;
  /** RegularExpression Id. */
  int CONSTANT = 8;
  /** RegularExpression Id. */
  int C = 9;
  /** RegularExpression Id. */
  int DOUBLE = 10;
  /** RegularExpression Id. */
  int E = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int FORMULA = 13;
  /** RegularExpression Id. */
  int FILTER = 14;
  /** RegularExpression Id. */
  int FLOOR = 15;
  /** RegularExpression Id. */
  int FUNCTION = 16;
  /** RegularExpression Id. */
  int F = 17;
  /** RegularExpression Id. */
  int G = 18;
  /** RegularExpression Id. */
  int INIT = 19;
  /** RegularExpression Id. */
  int INVARIANT_OPEN = 20;
  /** RegularExpression Id. */
  int I = 21;
  /** RegularExpression Id. */
  int INT = 22;
  /** RegularExpression Id. */
  int LABEL = 23;
  /** RegularExpression Id. */
  int LOG = 24;
  /** RegularExpression Id. */
  int MAX = 25;
  /** RegularExpression Id. */
  int MIN = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int MODULEBEGIN = 28;
  /** RegularExpression Id. */
  int MODULEEND = 29;
  /** RegularExpression Id. */
  int POW = 30;
  /** RegularExpression Id. */
  int REWARDSBEGIN = 31;
  /** RegularExpression Id. */
  int REWARDSEND = 32;
  /** RegularExpression Id. */
  int SQRT = 33;
  /** RegularExpression Id. */
  int SYSTEMBEGIN = 34;
  /** RegularExpression Id. */
  int SYSTEMEND = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int U = 37;
  /** RegularExpression Id. */
  int W = 38;
  /** RegularExpression Id. */
  int X = 39;
  /** RegularExpression Id. */
  int COND = 40;
  /** RegularExpression Id. */
  int PLUS = 41;
  /** RegularExpression Id. */
  int MINUS = 42;
  /** RegularExpression Id. */
  int TIMES = 43;
  /** RegularExpression Id. */
  int DIVIDE = 44;
  /** RegularExpression Id. */
  int LBRACKET = 45;
  /** RegularExpression Id. */
  int RBRACKET = 46;
  /** RegularExpression Id. */
  int LPAR = 47;
  /** RegularExpression Id. */
  int RPAR = 48;
  /** RegularExpression Id. */
  int LCURL = 49;
  /** RegularExpression Id. */
  int RCURL = 50;
  /** RegularExpression Id. */
  int RENAME = 51;
  /** RegularExpression Id. */
  int SEMICOLON = 52;
  /** RegularExpression Id. */
  int COLON = 53;
  /** RegularExpression Id. */
  int COMMA = 54;
  /** RegularExpression Id. */
  int AND = 55;
  /** RegularExpression Id. */
  int OR = 56;
  /** RegularExpression Id. */
  int NOT = 57;
  /** RegularExpression Id. */
  int IMPLIES = 58;
  /** RegularExpression Id. */
  int IFF = 59;
  /** RegularExpression Id. */
  int QUESTION = 60;
  /** RegularExpression Id. */
  int PRIME = 61;
  /** RegularExpression Id. */
  int EQ = 62;
  /** RegularExpression Id. */
  int NEQ = 63;
  /** RegularExpression Id. */
  int LEQ = 64;
  /** RegularExpression Id. */
  int LT = 65;
  /** RegularExpression Id. */
  int GT = 66;
  /** RegularExpression Id. */
  int GEQ = 67;
  /** RegularExpression Id. */
  int QUOTE = 68;
  /** RegularExpression Id. */
  int SMG = 69;
  /** RegularExpression Id. */
  int COALITION_OPEN = 70;
  /** RegularExpression Id. */
  int COALITION_CLOSE = 71;
  /** RegularExpression Id. */
  int PLAYERBEGIN = 72;
  /** RegularExpression Id. */
  int PLAYEREND = 73;
  /** RegularExpression Id. */
  int IDENTIFIER = 74;
  /** RegularExpression Id. */
  int NUM_INT = 75;
  /** RegularExpression Id. */
  int NUM_REAL = 76;
  /** RegularExpression Id. */
  int ARROW_ARROW = 77;
  /** RegularExpression Id. */
  int ARROW_ARG = 78;
  /** RegularExpression Id. */
  int SEPINTERVAL_SEPINTERVAL = 79;
  /** RegularExpression Id. */
  int SEPINTERVAL_ARG = 80;
  /** RegularExpression Id. */
  int INVARIANT_CLOSE = 81;
  /** RegularExpression Id. */
  int INVARIANT_IDENTIFIER = 82;
  /** RegularExpression Id. */
  int INVARIANT_OTHER = 83;
  /** RegularExpression Id. */
  int INIT_CLOSE = 84;
  /** RegularExpression Id. */
  int INIT_IDENTIFIER = 85;
  /** RegularExpression Id. */
  int INIT_OTHER = 86;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_SEMICOLON = 87;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_OTHER = 88;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_BRACKET_OPEN = 89;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_OTHER = 90;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_BRACKET_OPEN = 91;
  /** RegularExpression Id. */
  int NESTING_SEMICOLON_INNER_BRACKET_CLOSE = 92;
  /** RegularExpression Id. */
  int NESTING_BRACKET_RBRACKET = 93;
  /** RegularExpression Id. */
  int NESTING_BRACKET_OTHER = 94;
  /** RegularExpression Id. */
  int NESTING_BRACKET_BRACKET_OPEN = 95;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_OTHER = 96;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_BRACKET_OPEN = 97;
  /** RegularExpression Id. */
  int NESTING_BRACKET_INNER_BRACKET_CLOSE = 98;
  /** RegularExpression Id. */
  int NESTING_PAR_RPAR = 99;
  /** RegularExpression Id. */
  int NESTING_PAR_OTHER = 100;
  /** RegularExpression Id. */
  int NESTING_PAR_PAR_OPEN = 101;
  /** RegularExpression Id. */
  int UPDATE_TRUE = 102;
  /** RegularExpression Id. */
  int UPDATE_LPAR = 103;
  /** RegularExpression Id. */
  int UPDATE_SEMICOLON = 104;
  /** RegularExpression Id. */
  int UPDATE_PRIME = 105;
  /** RegularExpression Id. */
  int UPDATE_EQ = 106;
  /** RegularExpression Id. */
  int UPDATE_PLUS = 107;
  /** RegularExpression Id. */
  int UPDATE_AND = 108;
  /** RegularExpression Id. */
  int UPDATE_IDENTIFIER = 109;
  /** RegularExpression Id. */
  int UPDATE_OTHER = 110;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_OTHER = 111;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_PAR_OPEN = 112;
  /** RegularExpression Id. */
  int NESTING_PAR_INNER_PAR_CLOSE = 113;
  /** RegularExpression Id. */
  int NESTING_COLON_COLON = 114;
  /** RegularExpression Id. */
  int NESTING_COLON_OTHER = 115;
  /** RegularExpression Id. */
  int NESTING_COLON_QUESTION = 116;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_OTHER = 117;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_QUESTION = 118;
  /** RegularExpression Id. */
  int NESTING_COLON_INNER_COLON = 119;
  /** RegularExpression Id. */
  int COMMENT = 120;
  /** RegularExpression Id. */
  int UNEXPECTED_CHAR = 121;

  /** Lexical state. */
  int NESTING_COLON_INNER = 0;
  /** Lexical state. */
  int NESTING_COLON = 1;
  /** Lexical state. */
  int NESTING_PAR_INNER = 2;
  /** Lexical state. */
  int UPDATE_ENV = 3;
  /** Lexical state. */
  int NESTING_PAR = 4;
  /** Lexical state. */
  int NESTING_BRACKET_INNER = 5;
  /** Lexical state. */
  int NESTING_BRACKET = 6;
  /** Lexical state. */
  int NESTING_SEMICOLON_INNER = 7;
  /** Lexical state. */
  int NESTING_SEMICOLON = 8;
  /** Lexical state. */
  int INIT_ENV = 9;
  /** Lexical state. */
  int INVARIANT_ENV = 10;
  /** Lexical state. */
  int SEPINTERVAL_ENV = 11;
  /** Lexical state. */
  int ARROW_ENV = 12;
  /** Lexical state. */
  int DEFAULT = 13;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"A\"",
    "\"bool\"",
    "\"ceil\"",
    "\"const\"",
    "\"C\"",
    "\"double\"",
    "\"E\"",
    "\"false\"",
    "\"formula\"",
    "\"filter\"",
    "\"floor\"",
    "\"func\"",
    "\"F\"",
    "\"G\"",
    "\"init\"",
    "\"invariant\"",
    "\"I\"",
    "\"int\"",
    "\"label\"",
    "\"log\"",
    "\"max\"",
    "\"min\"",
    "\"mod\"",
    "\"module\"",
    "\"endmodule\"",
    "\"pow\"",
    "\"rewards\"",
    "\"endrewards\"",
    "\"sqrt\"",
    "\"system\"",
    "\"endsystem\"",
    "\"true\"",
    "\"U\"",
    "\"W\"",
    "\"X\"",
    "\"given\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"<-\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=>\"",
    "\"<=>\"",
    "\"?\"",
    "\"\\\'\"",
    "\"=\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\">\"",
    "\">=\"",
    "\"\\\"\"",
    "\"smg\"",
    "\"<<\"",
    "\">>\"",
    "\"player\"",
    "\"endplayer\"",
    "<IDENTIFIER>",
    "<NUM_INT>",
    "<NUM_REAL>",
    "\"->\"",
    "<ARROW_ARG>",
    "\"..\"",
    "<SEPINTERVAL_ARG>",
    "\"endinvariant\"",
    "<INVARIANT_IDENTIFIER>",
    "<INVARIANT_OTHER>",
    "\"endinit\"",
    "<INIT_IDENTIFIER>",
    "<INIT_OTHER>",
    "\";\"",
    "<NESTING_SEMICOLON_OTHER>",
    "\"[\"",
    "<NESTING_SEMICOLON_INNER_OTHER>",
    "\"[\"",
    "\"]\"",
    "\"]\"",
    "<NESTING_BRACKET_OTHER>",
    "\"[\"",
    "<NESTING_BRACKET_INNER_OTHER>",
    "\"[\"",
    "\"]\"",
    "\")\"",
    "<NESTING_PAR_OTHER>",
    "\"(\"",
    "\"true\"",
    "\"(\"",
    "\";\"",
    "\"\\\'\"",
    "\"=\"",
    "\"+\"",
    "\"&\"",
    "<UPDATE_IDENTIFIER>",
    "<UPDATE_OTHER>",
    "<NESTING_PAR_INNER_OTHER>",
    "\"(\"",
    "\")\"",
    "\":\"",
    "<NESTING_COLON_OTHER>",
    "\"?\"",
    "<NESTING_COLON_INNER_OTHER>",
    "\"?\"",
    "\":\"",
    "<COMMENT>",
    "<UNEXPECTED_CHAR>",
  };

}
