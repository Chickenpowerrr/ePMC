options
{
  JDK_VERSION = "1.8";
  LOOKAHEAD = 1;
  STATIC = false;
}

PARSER_BEGIN(GuardedCommandTemporalExpressionParser)
package epmc.guardedcommand.temporal;
import epmc.error.UtilError;
import epmc.guardedcommand.error.ProblemsGuardedCommand;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.value.Operator;
import epmc.value.Value;
import epmc.value.ContextValue;
import epmc.value.OperatorAnd;
import epmc.value.OperatorNot;
import epmc.value.OperatorAddInverse;
import epmc.value.OperatorImplies;
import epmc.value.OperatorIff;
import epmc.value.OperatorOr;
import epmc.value.OperatorIte;
import epmc.value.OperatorEq;
import epmc.value.OperatorNe;
import epmc.value.OperatorAdd;
import epmc.value.OperatorSubtract;
import epmc.value.OperatorLe;
import epmc.value.OperatorLt;
import epmc.value.OperatorGe;
import epmc.value.OperatorGt;
import epmc.value.OperatorMultiply;
import epmc.value.OperatorDivide;
import epmc.value.OperatorPow;
import epmc.value.OperatorMax;
import epmc.value.OperatorMin;
import epmc.value.OperatorCeil;
import epmc.value.OperatorFloor;
import epmc.value.OperatorLog;
import epmc.value.OperatorMod;
import epmc.value.ValueInteger;
import epmc.value.TypeInteger;
import epmc.value.TypeReal;
import epmc.value.UtilValue;
import epmc.value.ValueAlgebra;
import epmc.expression.*;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionFilter;
import epmc.expression.standard.ExpressionMultiObjective;
import epmc.expression.standard.ExpressionCoalition;
import epmc.expression.standard.ExpressionTemporal;
import epmc.expression.standard.ExpressionReward;
import epmc.expression.standard.ExpressionQuantifier;
import epmc.expression.standard.ExpressionSteadyState;
import epmc.expression.standard.ExpressionLiteral;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.TemporalType;
import epmc.expression.standard.FilterType;
import epmc.expression.standard.TimeBound;
import epmc.expression.standard.RewardType;
import epmc.expression.standard.CmpType;
import epmc.expression.standard.DirType;

import java.util.ArrayList;
import java.util.List;

public final class GuardedCommandTemporalExpressionParser {
	private static enum UnType {
		NEXT,
		FINALLY,
		GLOBALLY
	};

	private static enum BinType {
		UNTIL,
		RELEASE,
		WEAK
	};

	private static class OldSchoolFilter {
		private final FilterType type;
		private final Expression states;

		OldSchoolFilter(FilterType type, Expression states) {
			this.type = type;
			this.states = states;
		}

		FilterType getType() {
			return type;
		}

		Expression getStates() {
			return states;
		}
	};

	private ContextValue contextVal;
	private int initialLine;
	private int initialColumn;
	private int errorLine;
	private int errorColumn;

	private void computeErrorPosition(int tline, int tcolumn) {
		errorLine = tline + initialLine - 1;
		errorColumn = tcolumn;
		if (tline == 1) {
			errorColumn += initialColumn - 1;
		}
	}

	public Expression parseExpressionAsProperty(ContextValue contextVal) throws EPMCException {
		return parseExpressionAsProperty(contextVal, 1, 1);
	}

	public Expression parseExpressionAsProperty(ContextValue contextVal, int line, int column) throws EPMCException {
		this.contextVal = contextVal;
		this.initialLine = line;
		this.initialColumn = column;

		try {
			return parseCompleteProp();
		} catch (ParseException pe) {
			Token errorToken = getToken(1);
			if (errorToken.kind == UNEXPECTED_CHAR) {
				computeErrorPosition(errorToken.endLine, errorToken.endColumn);
				ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_EXPRESSION_PARSER_UNEXPECTED_CHARACTER, newPositional(errorLine, errorColumn), errorToken.image);
			} else {
				computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
				ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_EXPRESSION_PARSER_SYNTAX_ERROR, newPositional(errorLine, errorColumn), errorToken.toString());
			}
			return null;
		} catch (EPMCException e) {
		   throw e;
		} catch (Throwable t) {
			  ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_EXPRESSION_PARSER_GENERAL_ERROR, t, t);
			  return null;
		}
	}

	private ExpressionOperator newOperator(Operator operator, Expression... operands) {
	  return new ExpressionOperator.Builder()
	  	.setOperator(operator)
	  	.setOperands(operands)
	  	.build();
	}

	private ExpressionOperator newOperator(String operator, Expression... operands) {
	  return new ExpressionOperator.Builder()
	  	.setOperator(contextVal.getOperator(operator))
	  	.setOperands(operands)
	  	.build();
	}

  private Expression and(Expression a, Expression b) {
      return newOperator(OperatorAnd.IDENTIFIER, a, b);
  }

    private Expression not(Expression expression) {
    	return new ExpressionOperator.Builder()
        	.setOperator(contextVal.getOperator(OperatorNot.IDENTIFIER))
        	.setOperands(expression)
        	.build();
    }

  private Expression addInverse(Expression expression) {
    return new ExpressionOperator.Builder()
      	.setOperator(contextVal.getOperator(OperatorAddInverse.IDENTIFIER))
      	.setOperands(expression)
      	.build();
  }

    private Expression or(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorOr.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private Expression iff(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorIff.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private Expression implies(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorImplies.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private static boolean isPosInf(Expression expression) {
        assert expression != null;
        if (!(expression instanceof ExpressionLiteral)) {
            return false;
        }
        ExpressionLiteral expressionLiteral = (ExpressionLiteral) expression;
        return ValueAlgebra.asAlgebra(expressionLiteral.getValue()).isPosInf();
    }

    private ExpressionReward newRewardSteadyState(Expression structure) {
        return new ExpressionReward.Builder()
        		.setContext(contextVal)
                .setReward(structure)
                .setRewardType(RewardType.STEADYSTATE)
                .build();
    }

    private TimeBound newTimeBound(Expression left, Expression right,
            boolean leftOpen, boolean rightOpen) {
        return new TimeBound.Builder()
        		.setContext(contextVal)
                .setLeft(left)
                .setRight(right)
                .setLeftOpen(leftOpen)
                .setRightOpen(rightOpen)
                .build();
    }

    private TimeBound newTimeBound() {
        return new TimeBound.Builder()
        		.setContext(contextVal)
                .build();
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, List<Expression> operands,
            List<TimeBound> timeBounds) {
        assert type != null;
        assert operands != null;
        assert operands != null;
        assert timeBounds != null;
        for (TimeBound timeBound : timeBounds) {
            assert timeBound != null;
        }
        return new ExpressionTemporal
                (operands, type, timeBounds, null);
    }

    private ExpressionReward newRewardInstantaneous
    (Expression structure, Expression time) {
        return new ExpressionReward.Builder()
        		.setContext(contextVal)
                .setRewardType(RewardType.INSTANTANEOUS)
                .setReward(structure)
                .setTime(time)
                .build();
    }

    private ExpressionReward newRewardReachability
    (Expression structure, Expression reachSet) {
        return new ExpressionReward.Builder()
        		.setContext(contextVal)
                .setRewardType(RewardType.REACHABILITY)
                .setReward(structure)
                .setReachSet(reachSet)
                .build();
    }

    private ExpressionReward newRewardCumulative
    (Expression structure, Expression time) {
        return new ExpressionReward.Builder()
        		.setContext(contextVal)
                .setRewardType(RewardType.CUMULATIVE)
                .setReward(structure)
                .setTime(time)
                .build();
    }

    private ExpressionReward newRewardDiscounted
    (Expression structure, Expression timebound, Expression discount) {
        return new ExpressionReward.Builder()
        		.setContext(contextVal)
                .setRewardType(RewardType.DISCOUNTED)
                .setReward(structure)
                .setTime(timebound)
                .setDiscount(discount)
                .build();
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, Expression operand, TimeBound bound) {
        assert type != null;
        assert bound != null;
        return new ExpressionTemporal
                (operand, type, bound, null);
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, Expression op1, Expression op2,
            TimeBound bound) {
        assert type != null;
        assert bound != null;
        return new ExpressionTemporal
                (op1, op2, type, bound, null);
    }

    private ValueInteger newValueInteger(String string) throws EPMCException {
      assert string != null;
      return UtilValue.newValue(TypeInteger.get(contextVal), string);
  }

    private static Positional newPositional(long line, long column) {
        assert line >= 0;
        assert column >= 0;
        return new Positional.Builder()
                .setLine(line)
                .setColumn(column)
                .build();
    }

}

PARSER_END(GuardedCommandTemporalExpressionParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : // RESERVED KEYWORDS
{
	< A : "A" >
|	< BOOL : "bool" >
|	< CEIL : "ceil" >
|	< CONSTANT : "const" >
|	< C : "C" >
|	< DISCOUNT : "DISCOUNT" >
|	< DOUBLE : "double" >
|	< E : "E" >
|	< FALSE : "false" >
|	< FORMULA : "formula" >
|	< FILTER : "filter" >
|	< FLOOR : "floor" >
|	< FUNCTION : "func" >
|	< F : "F" >
|	< G : "G" >
|	< INIT : "init" >
|	< INITEND : "endinit" >
|	< INVARIANT_OPEN : "invariant" >
|	< INVARIANT_CLOSE : "endinvariant" >
|	< I : "I" >
|	< INT : "int" >
|	< LABEL : "label" >
|	< LOG : "log" >
|	< MAX : "max" >
|	< MIN : "min" >
|	< MOD : "mod" >
|	< MODULEBEGIN : "module" >
|	< MODULEEND : "endmodule" >
|	< POW : "pow" >
|	< P : "P">
|	< PMAX : "Pmax">
|	< PMIN : "Pmin">
|	< R : "R">
|	< REWARDSBEGIN : "rewards" >
|	< REWARDSEND : "endrewards" >
|	< RMAX : "Rmax">
|	< RMIN : "Rmin">
|	< SQRT : "sqrt" >
|	< SYSTEMBEGIN : "system" >
|	< SYSTEMEND : "endsystem" >
|	< TRUE : "true" >
|	< U : "U" >
|	< W : "W" >
|	< X : "X" >
|	< COND : "given" >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< TIMES : "*" >
|	< DIVIDE : "/" >
|	< ARROW : "->" >
|	< LBRACKET : "[" >
|	< RBRACKET : "]" >
|	< LPAR : "(" >
|	< RPAR : ")" >
|	< LCURL : "{" >
|	< RCURL : "}" >
|	< RENAME : "<-" >
|	< SEMICOLON : ";" >
|	< COLON : ":" >
|	< COMMA : "," >
|	< AND : "&" >
|	< OR : "|" >
|	< NOT : "!" >
|	< IMPLIES : "=>" >
|	< IFF : "<=>" >
|	< QUESTION : "?" >
|	< PRIME : "'" >
|	< EQ : "=" >
|	< NEQ : "!=" >
|	< LEQ : "<=" >
|	< LT : "<" >
|	< GT : ">" >
|	< GEQ : ">=" >
|	< QUOTE : "\"" >
|	< SEPINTERVAL : ".." >
// game stuff
|	< SMG : "smg" >
|	< COALITION_OPEN : "<<" >
|	< COALITION_CLOSE : ">>" >
|	< PLAYERBEGIN : "player" >
|	< PLAYEREND : "endplayer" >
|	< IDENTIFIER : [ "A"-"Z","a"-"z","_" ] ( [ "A"-"Z","a"-"z","_","0"-"9" ] )* >
|	< NUM_INT : (["1"-"9"](["0"-"9"])*)|("0") >
|	< NUM_REAL : (["0"-"9"])+(".")?(["0"-"9"])+(["e","E"](["-","+"])?(["0"-"9"])+)? >
}

SPECIAL_TOKEN :
{
//	< COMMENT : "//"(~["\n","\r"])*("\n"|"\r"|"\r\n") >
	< COMMENT : "//"(~["\n","\r"])* >
}

TOKEN :
{
	< UNEXPECTED_CHAR : ~[] >
}

private Expression parseCompleteProp() throws EPMCException :
{
	Expression e;
}
{
	e = parseExpTemporal()
	(
		<SEMICOLON>
	)?
	<EOF>
	{ return e; }
}

private Expression parseExpTemporal() throws EPMCException :
{
	Expression e;
}
{
	e = parseTemporalBinary()
	{ return e; }
}

private Expression parseExp() throws EPMCException :
{
	Expression e;
}
{
	e = ExpressionITE()
	{ return e; }
}

private Expression ExpressionITE() throws EPMCException :
{
	Expression prop;
	Expression propThen;
	Expression propElse;
}
{
	prop = ExpressionImplies()
	(
		<QUESTION>
		propThen = ExpressionImplies()
		<COLON>
		propElse = ExpressionITE()
		{ prop = new ExpressionOperator.Builder()
			.setOperator(contextVal.getOperator(OperatorIte.IDENTIFIER))
			.setOperands(prop, propThen, propElse)
			.build(); }
	)?
	{ return prop; }
}

private Expression ExpressionImplies() throws EPMCException :
{
	Expression p;
	Expression nextProp;
}
{
	p = ExpressionIff()
	(
		<IMPLIES> 
		nextProp = ExpressionIff()
		{ p = implies(p, nextProp); }
	)*
	{ return p; }
}

private Expression ExpressionIff() throws EPMCException :
{
	Expression p;
	Expression nextProp;
}
{
	p = ExpressionOr()
	(
		<IFF> 
		nextProp = ExpressionOr()
		{ p = iff(p, nextProp); }
	)*
	{ return p; }
}

private Expression ExpressionOr() throws EPMCException :
{
	Expression p;
	Expression nextProp;
}
{
	p = ExpressionAnd()
	(
		<OR> 
		nextProp = ExpressionAnd()
		{ p = or(p, nextProp); }
	)*
	{ return p; }
}

private Expression ExpressionAnd() throws EPMCException :
{
	Expression p;
	Expression nextProp;
}
{
	p = ExpressionNot()
	(
		<AND>
		nextProp = ExpressionNot()
		{ p = and(p, nextProp); }
	)*
	{ return p; }
}

private Expression ExpressionNot() throws EPMCException :
{
	  Expression p;
}
{
	(
		<NOT>
		p = ExpressionNot()
		{ p = not(p); }
	| 
		p = ExpressionEqNe()
//		p = parseTemporalBinary()
	)
	{ return p; }
}

private Expression ExpressionEqNe() throws EPMCException :
{
	Expression p;
	Expression nextProp;
	Operator type;
}
{
	p = ExpressionROp()
	(
		type = EqNe() 
		nextProp = ExpressionROp()
		{ p = newOperator(type, p, nextProp); }
	)*
	{ return p; }
}

private Operator EqNe() throws EPMCException :
{
}
{
	(
		<EQ> 
		{ return contextVal.getOperator(OperatorEq.IDENTIFIER); }
	| 
		<NEQ> 
		{ return contextVal.getOperator(OperatorNe.IDENTIFIER); }
	)
}

private Expression ExpressionROp() throws EPMCException :
{
	Expression p;
	Expression nextProp;
	Operator type;
}
{
	p = ExpressionPlusMinus()
	(
		type = LtGtLeGe()
		nextProp = ExpressionPlusMinus()
		{ p = newOperator(type, p, nextProp); }
	)*
	{ return p; }
}

private Operator LtGtLeGe() throws EPMCException :
{
}
{
	(
		<LT> 
		{ return contextVal.getOperator(OperatorLt.IDENTIFIER); }
	| 
		<LEQ> 
		{ return contextVal.getOperator(OperatorLe.IDENTIFIER); }
	| 
		<GT> 
		{ return contextVal.getOperator(OperatorGt.IDENTIFIER); }
	| 
		<GEQ> 
		{ return contextVal.getOperator(OperatorGe.IDENTIFIER); }
	)
}

private Expression ExpressionPlusMinus() throws EPMCException :
{
	Expression p;
	Expression nextProp;
	Operator type;
}
{
	p = ExpressionTimesDivide()
	(
		LOOKAHEAD((<PLUS>|<MINUS>))
		type = PlusMinus()
		nextProp = ExpressionTimesDivide()
		{ p = newOperator(type, p, nextProp); }
	)*
	{ return p; }
}

private Operator PlusMinus() throws EPMCException :
{
}
{
	(
		<PLUS> 
		{ return contextVal.getOperator(OperatorAdd.IDENTIFIER); }
	| 
		<MINUS> 
		{ return contextVal.getOperator(OperatorSubtract.IDENTIFIER); }
	)
}

private Expression ExpressionTimesDivide() throws EPMCException :
{
	Expression p;
	Expression nextProp;
	Operator type;
}
{
	p = ExpressionUnaryMinus()
	(
		type = TimesDivide()
		nextProp = ExpressionUnaryMinus()
		{ p = newOperator(type, p, nextProp); }
	)*
	{ return p; }
}

private Operator TimesDivide() throws EPMCException :
{
}
{
	(
		<TIMES> 
		{ return contextVal.getOperator(OperatorMultiply.IDENTIFIER); }
	| 
		<DIVIDE> 
		{ return contextVal.getOperator(OperatorDivide.IDENTIFIER); }
	)
}

private Expression ExpressionUnaryMinus() throws EPMCException :
{
	  Expression p;
}
{
	(
		<MINUS> 
		p = ExpressionUnaryMinus()
		{ p = addInverse(p); }
	| 
		p = parseBasic()
	)
	{ return p; }
}

private Expression parseBasic() throws EPMCException :
{
	Expression e;
}
{
	(
		e = parseBoolean()
	|
		e = parseFunction()
	|
		e = parseIdentifier()
	|
		e = parseInt()
	|
		e = parseReal()
	| 
		e = parseParenth()
	| 
		e = parseLabel()
	)
	{ return e; }
}

private Expression parseFunction() throws EPMCException :
{
	Expression e;
	Expression ne;
	Operator type;
}
{
	(
		e = parseSpecialFunction()
	|
		type = functionMultipleParams()
		<LPAR>
		e = parseFunctionN(type)
		<RPAR>
	|
		type = functionTwoParams()
		<LPAR>
		e = parseFunction2(type)
		<RPAR>
	|
		type = functionOneParam()
		<LPAR>
		e = parseFunction1(type)
		<RPAR>
	|
		<FUNCTION> 
		<LPAR>
		(
			e = parseSqrt()
		|
			type = functionMultipleParams()
			<COMMA>
			e = parseFunctionN(type)
		|
			type = functionTwoParams()
			<COMMA>
			e = parseFunction2(type)
		|
			type = functionOneParam()
			<COMMA>
			e = parseFunction1(type)
		)
		<RPAR>
	)
	{ return e; }
}

private Expression parseSpecialFunction() throws EPMCException :
{
	Expression e;
}
{
	(
		e = parseSqrt()
	)
	{ return e; }
}

private Expression parseSqrt() throws EPMCException :
{
	Expression e;
}
{
	//sqrt(e) is just pow(e, 0.5), but it has to be managed independently...
	<SQRT>
	<LPAR>
	e = parseExp()
	<RPAR>
	{ return newOperator(contextVal.getOperator(OperatorPow.IDENTIFIER), e,
		new ExpressionLiteral.Builder()
			.setValue(UtilValue.newValue(TypeReal.get(contextVal), "0.5"))
			.build()); }
}

private Expression parseFunctionN(Operator type) throws EPMCException :
{
	Expression e;
	Expression ne;
}
{
	e = parseExp()
	(
		<COMMA>
		ne = parseExp()
		{ e = newOperator(type, e, ne);}
	)+
	{ return e; }
}

private Expression parseFunction2(Operator type) throws EPMCException :
{
	Expression e;
	Expression ne;
}
{
	e = parseExp()
	<COMMA>
	ne = parseExp()
	{ return newOperator(type, e, ne);}
}

private Expression parseFunction1(Operator type) throws EPMCException :
{
	Expression e;
}
{
	e = parseExp()
	{ return newOperator(type, e);}
}

private Operator functionMultipleParams() throws EPMCException :
{
}
{
	(
		<MAX> 
		{ return contextVal.getOperator(OperatorMax.IDENTIFIER); }
	| 
		<MIN> 
		{ return contextVal.getOperator(OperatorMin.IDENTIFIER); }
	)
}

private Operator functionOneParam() throws EPMCException :
{
}
{
	(
//		//sqrt(e) is just pow(e, 0.5), but it has to be managed independently...
//		<SQRT> 
//	|
		<FLOOR> 
		{ return contextVal.getOperator(OperatorFloor.IDENTIFIER); }
	| 
		<CEIL> 
		{ return contextVal.getOperator(OperatorCeil.IDENTIFIER); }
	)
}

private Operator functionTwoParams() throws EPMCException :
{
}
{
	(
		<POW> 
		{ return contextVal.getOperator(OperatorPow.IDENTIFIER); }
	| 
		<MOD> 
		{ return contextVal.getOperator(OperatorMod.IDENTIFIER); }
	| 
		<LOG> 
		{ return contextVal.getOperator(OperatorLog.IDENTIFIER); }
	)
}

private Expression parseParenth() throws EPMCException :
{
	Expression p;
}
{
	<LPAR>
	p = parseExpTemporal()
	<RPAR>
	{ return p; }
}

private Expression parseIdentifier() throws EPMCException :
{
	Token literal;
}
{
	literal = <IDENTIFIER>
	{ return new ExpressionIdentifierStandard.Builder()
		.setName(literal.toString())
		.build(); }
}

private Expression parseLabel() throws EPMCException :
{
	Token literal;
}
{
	<QUOTE> 
	(
		literal = <IDENTIFIER> 
	|
		literal = <INIT>
	)
	<QUOTE>
	{ return new ExpressionIdentifierStandard.Builder()
		.setName("\"" + literal.toString() + "\"")
		.build(); }
}

private Expression parseReal() throws EPMCException :
{
	Token real;
}
{
	real = <NUM_REAL>
	{ return new ExpressionLiteral.Builder()
		.setValue(UtilValue.newValue(TypeReal.get(contextVal), real.toString()))
		.build(); }
}

private Expression parseInt() throws EPMCException :
{
	Token intg;
}
{
	intg = <NUM_INT>
	{ return new ExpressionLiteral.Builder()
		.setValue(newValueInteger(intg.toString()))
		.build(); }
}

private List<Expression> parseList() throws EPMCException : 
{
	List<Expression> vector = new ArrayList<Expression>();
	Expression element;
}
{
	element = parseExp()
	{ vector.add(element); }
	(
		<COMMA>
		element = parseExp()
		{ vector.add(element); }
	)*
	{ return vector; }
}

private Expression parseBoolean() throws EPMCException :
{
}
{
	(
		<TRUE> 
		{ return ExpressionLiteral.getTrue(contextVal); } 
	|
		<FALSE> 
		{ return ExpressionLiteral.getFalse(contextVal); }
	)
}





private OldSchoolFilter OldSchoolFilter() throws EPMCException :
{
	Expression states;
	boolean min = false;
	boolean max = false;
}
{
	<LCURL> 
	states = parseExpTemporal() 
	<RCURL>
	(
		<LCURL>
		(
			<MAX> 
			<RCURL> 
			{ max = true; }
		| 
			<MIN> 
			<RCURL> 
			{ min = true; } 
			( 
				<LCURL> 
				<MAX> 
				<RCURL> 
				{ max = true; } 
			)?
		)  
	)?
	{
		FilterType type = null;
		if (!min && !max) {
			type = FilterType.STATE;
		} else if (min && !max) {
			type = FilterType.MIN;
		} else if (!min && max) {
			type = FilterType.MAX;
		} else if (min && max) {
			type = FilterType.RANGE;
		}
		return new OldSchoolFilter(type, states);
	}
}

private Expression parseCoalition() throws EPMCException :
{
	Expression innerFormula;
	List<Expression> players = new ArrayList<Expression>();
	Token coal;
	Expression player;
}{
	coal = <COALITION_OPEN>
	(
		player = parseIdentifier()
	|
		player = parseInt()
	)
	{ players.add(player); }
	(
		<COMMA>
		(
			player = parseIdentifier()
		|
			player = parseInt()
		)
		{ players.add(player); }
	)*
	<COALITION_CLOSE>
	(
		innerFormula = parseProperty()
	| 
		innerFormula = parseRewQuant()
	)
	{ return new ExpressionCoalition.Builder()
		.setQuantifier(innerFormula).setPlayers(players)
		.build();
	}
}

private Expression parseProperty() throws EPMCException :
{
	Expression prop;
	Expression cmp;
	Expression cond = ExpressionLiteral.getTrue(contextVal);
	DirType dirType;
	CmpType cmpType;
	OldSchoolFilter filter = null;
}
{
	dirType = PropQuantProbDirType()
	(
		(
			<EQ>
			(
				<QUESTION> 
				{ 
					cmpType = CmpType.IS;
					cmp = ExpressionLiteral.getTrue(contextVal); 
				}
			|
				cmp = parseExpTemporal()
				{ cmpType = CmpType.EQ; }
			)
			<LBRACKET>
			prop = parseExpTemporal()
			(
				<COND>
				cond = parseExpTemporal()
			)?
			( 
				filter = OldSchoolFilter() 
			)?
			<RBRACKET>
		)
	|
		cmpType = PropQuantCmpType()
		cmp = parseExpTemporal()
		<LBRACKET>
		prop = parseExpTemporal()
		(
			<COND>
			cond = parseExpTemporal()
		)?
		( 
			filter = OldSchoolFilter() 
		)?
		<RBRACKET>
	)
	{
		Expression result = new ExpressionQuantifier.Builder()
			.setContext(contextVal)
			.setDirType(dirType)
			.setCmpType(cmpType)
			.setQuantified(prop)
			.setCompare(cmp)
			.setCondition(cond)
			.build();
		if (filter != null) {
		  result = new ExpressionFilter.Builder()
		  		.setFilterType(filter.getType())
		  		.setProp(result)
		  		.setStates(filter.getStates())
		  		.build();
		}
		return result;
	}
}

DirType PropQuantProbDirType() :
{
}
{
	(
		<P> 
		{ return DirType.NONE; }
	| 
		<PMAX> 
		{ return DirType.MAX; }
	| 
		<PMIN> 
		{ return DirType.MIN; }
	)
}

private Expression parseRewardPath(Expression rewardStructure) throws EPMCException :
{
	Expression prop;
	Expression timebound;
	Expression discount;
}
{
	(
		<F> 
		prop = parseExpTemporal()
		{ return newRewardReachability(rewardStructure, prop); }
	| 
		<C> 
		{
		  timebound = ExpressionLiteral.getPosInf(contextVal);
		  discount = ExpressionLiteral.getPosInf(contextVal);
		}
		(
			<LEQ> 
			timebound = parseExpTemporal()
		)?
		(
			<COMMA> <DISCOUNT> <EQ>
			discount = parseExpTemporal()
		)?
		{
			if (isPosInf(discount)) {
				return newRewardCumulative(rewardStructure, timebound);
			} else {
				return newRewardDiscounted(rewardStructure, timebound, discount);
			}
		}
			
	| 
		<I> 
		<EQ>
		prop = parseExpTemporal()
		{ return newRewardInstantaneous(rewardStructure, prop); }
	)
}

private Expression parseRewardStructure() throws EPMCException :
{
	Expression rewardStructure = null;
	Token literal;
}
{
	<LCURL>
	( 
		LOOKAHEAD(<QUOTE>)
		<QUOTE> 
		literal = <IDENTIFIER> 
		<QUOTE>
		{ rewardStructure = new ExpressionIdentifierStandard.Builder()
			.setName("\"" + literal.toString() + "\"")
			.build(); }
	| 
		rewardStructure = parseExp()
	)
	<RCURL>
	{ return rewardStructure; }
}

private Expression parseRewQuant() throws EPMCException :
{
	Expression prop;
	Expression cmp;
	Expression cond = ExpressionLiteral.getTrue(contextVal);
	DirType dirType;
	CmpType cmpType;
	Expression rewardStructure = ExpressionLiteral.getTrue(contextVal);
	OldSchoolFilter filter = null;
	Token oper;
}
{
	{ oper = getToken(1); } 
	(
		<R> 
		{ dirType = DirType.NONE; }
		( 
			rewardStructure = parseRewardStructure() 
		)?
		(
			<MIN> 
			{ dirType = DirType.MIN; }
		| 
			<MAX> 
			{ dirType = DirType.MAX; }
		)?
	|
		<RMIN> 
		{ dirType = DirType.MIN; }
	| 
		<RMAX> 
		{ dirType = DirType.MAX; }
	)
	(
		{ 
			cmpType = CmpType.IS;
			cmp = ExpressionLiteral.getTrue(contextVal); 
		}
		<EQ>
		(
			<QUESTION> 
			{ 
				cmpType = CmpType.IS; 
				cmp = ExpressionLiteral.getTrue(contextVal); 
			}
		|
			cmp = parseExpTemporal() 
			{ cmpType = CmpType.EQ; }
		)
	|
		cmpType = PropQuantCmpType()
		cmp = parseExpTemporal()
	)
	<LBRACKET>
	prop = parseRewardPath(rewardStructure)
	( 
		<COND> 
		cond = parseExpTemporal() 
	)?
	( 
		filter = OldSchoolFilter() 
	)?
	<RBRACKET>
	{
		Expression result = new ExpressionQuantifier.Builder()
			.setContext(contextVal)
			.setDirType(dirType)
			.setCmpType(cmpType)
			.setQuantified(prop)
			.setCompare(cmp)
			.setCondition(cond)
			.build();
		if (filter != null) {
			result = new ExpressionFilter.Builder()
				.setFilterType(filter.getType())
				.setProp(result)
				.setStates(filter.getStates())
				.build();
		}
		return result;
	}
}

private CmpType PropQuantCmpType() :
{
}
{
	(
		<LEQ> 
		{ return CmpType.LE; }
	| 
		<LT> 
		{ return CmpType.LT; }
	| 
		<GEQ> 
		{ return CmpType.GE; }
	| 
		<GT> 
		{ return CmpType.GT; }
	)
}

private FilterType ExpressionFilterType() throws EPMCException :
{
	FilterType type = null;
	Token id;
}
{
	(
		<MIN> 
		{ type = FilterType.MIN; }
	| 
		<MAX> 
		{ type = FilterType.MAX; }
	| 
		<PLUS> 
		{ type = FilterType.SUM; }
	|
		<AND> 
		{ type = FilterType.FORALL; }
	| 
		<OR> 
		{ type = FilterType.EXISTS; }
	| 
		id = <IDENTIFIER>
		{
			switch (id.image) {
				case "count" :
					type = FilterType.COUNT;
					break;
				case "sum" :
					type = FilterType.SUM;
					break;
				case "avg":
					type = FilterType.AVG;
					break;
				case "first":
					type = FilterType.FIRST;
					break;
				case "range":
					type = FilterType.RANGE;
					break;
				case "forall":
					type = FilterType.FORALL;
					break;
				case "exists":
					type = FilterType.EXISTS;
					break;
				case "state":
					type = FilterType.STATE;
					break;
				case "argmin":
					type = FilterType.ARGMIN;
					break;
				case "argmax":
					type = FilterType.ARGMAX;
					break;
				case "print":
					type = FilterType.PRINT;
					break;
				case "printall":
					type = FilterType.PRINTALL;
					break;
				default: 
					computeErrorPosition(id.beginLine, id.beginColumn);
					ensure(false, ProblemsGuardedCommand.GUARDEDCOMMAND_EXPRESSION_PARSER_UNKNOWN_FILTER_TYPE, newPositional(errorLine, errorColumn), id.toString());
			}
		}
	)
	{ return type; }
}

private Expression parseFilter() throws EPMCException :
{
	FilterType type;
	Expression prop;
	Expression states = ExpressionLiteral.getTrue(contextVal);
}
{
	<FILTER>
	<LPAR>
	type = ExpressionFilterType()
	<COMMA>
	prop = parseExpTemporal()
	(
		<COMMA>
		states = parseExpTemporal()
	)?
	<RPAR>
	{ return new ExpressionFilter.Builder()
		.setFilterType(type)
		.setProp(prop)
		.setStates(states)
		.build(); }
}

//private Expression parseExpAsProp() throws EPMCException :
//{
//	Expression p;
//}
//{
//	p = parseTemporalBinary()
//	{ return p; }
//}

TimeBound TimeBound() throws EPMCException :
{
	Expression left;
	Expression right;
	TimeBound timeBound = newTimeBound();
	boolean leftOpen = true;
	boolean rightOpen = true;
}
{
	(
		<LT> 
		right = parseExp()
		{ timeBound = newTimeBound(ExpressionLiteral.getZero(contextVal), right, false, true); }
	|
		<LEQ> 
		right = parseExp()
		{ timeBound = newTimeBound(ExpressionLiteral.getZero(contextVal), right, false, false); }
	|
		<GT> 
		left = parseExp()
		{ timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(contextVal), true, true); }
	|
		<GEQ> 
		left = parseExp()
		{ timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(contextVal), false, true); }
	|
//		LOOKAHEAD((<LBRACKET>|<RBRACKET>) parseExp(true) <COMMA> parseExp(true) (<LBRACKET>|<RBRACKET>) <LPAR>)
		(
			<LBRACKET>
			{ leftOpen = false; }
		|
			<RBRACKET>
			{ leftOpen = true; }
		)
		left = parseExp() 
		<COMMA> 
		right = parseExp() 
		(
			<RBRACKET>
			{ rightOpen = false; }
		|
			<LBRACKET>
			{ rightOpen = true; }
		)
		{ timeBound = newTimeBound(left, right, leftOpen, rightOpen); }

//		LOOKAHEAD(<LBRACKET> parseExpAsProp(true) <COMMA> parseExpAsProp(true) <RBRACKET>)
//		<LBRACKET> 
//		left = parseExpAsProp(true) 
//		<COMMA> 
//		right = parseExpAsProp(true) 
//		<RBRACKET>
//		{ timeBound = newTimeBound(left, right, false, false); }
//	|
//		LOOKAHEAD(<LBRACKET> parseExp(true) <COMMA> parseExp(true) <LBRACKET>)
//		<LBRACKET> 
//		left = parseExp(true) 
//		<COMMA> 
//		right = parseExp(true) 
//		<LBRACKET>
//		{ timeBound = newTimeBound(left, right, false, true); }
//	|
//		LOOKAHEAD(<RBRACKET> parseExp(true) <COMMA> parseExp(true) <RBRACKET>)
//		<RBRACKET> 
//		left = parseExp(true) 
//		<COMMA> 
//		right = parseExp(true) 
//		<RBRACKET>
//		{ timeBound = newTimeBound(left, right, true, false); }
//	|
//		LOOKAHEAD(<RBRACKET> parseExp(true) <COMMA> parseExp(true) <LBRACKET>)
//		<RBRACKET> 
//		left = parseExp(true) 
//		<COMMA> 
//		right = parseExp(true) 
//		<LBRACKET>
//		{ timeBound = newTimeBound(left, right, true, true); }
	)?
	{ return timeBound; }
}

//private Expression parseExpForTimeBound() throws EPMCException :
//{
//	Expression exp;
//}
//{
//	(
//		exp = parseReal() 
//	| 
//		exp = parseInt()
//	| 
//		exp = parseIdentifier()
//	| 
//		exp = parseParenth()
//	)
//	{ return exp; }
//}

private Expression parseTemporalBinary() throws EPMCException :
{
	ArrayList<Expression> expressions = new ArrayList<Expression>();
	ArrayList<TimeBound> timeBounds = new ArrayList<TimeBound>();
	Expression p;
	TimeBound timeBound;
	BinType lastType = null;
	BinType type = null;
	Token oper;
}
{
	p = parseTemporalUnary()
	{ expressions.add(p); }
	(
		{ oper = getToken(1); }
		type = TempBinType()
		{
			if (lastType != null) {
				if (lastType != BinType.UNTIL || type != BinType.UNTIL) {
				  ensure(false, ProblemsGuardedCommand.PARSE_ERROR_MULTI_UNTIL, newPositional(token.endLine, token.endColumn), token.image);
				}
			}
			lastType = type;
		}
		timeBound = TimeBound()
		{ timeBounds.add(timeBound); }
//		<LPAR>
		p = parseTemporalBinary()
//		<RPAR>
		{ expressions.add(p); }
	)?
	{
		if (expressions.size() == 1) {
			return p;
		} else {
			switch (type) {
			case RELEASE:
				return newTemporal(TemporalType.RELEASE, expressions, timeBounds);
			case UNTIL:
				return newTemporal(TemporalType.UNTIL, expressions, timeBounds);
			case WEAK: {
				Expression or = or(expressions.get(0), expressions.get(1));
				return newTemporal(TemporalType.RELEASE, expressions.get(1), or, timeBounds.get(0));
			}
			default:
				assert(false);
				return null;
			}
		}
	}
}

private BinType TempBinType() :
{
}
{
	(
		<W> 
		{ return BinType.WEAK; }
	| 
		<R> 
		{ return BinType.RELEASE; }
	| 
		<U> 
		{ return BinType.UNTIL; }
	)
}

private Expression parseTemporalUnary() throws EPMCException :
{
	Expression p;
	UnType type;
	TimeBound timeBound;
}
{
	(
		type = TempUnType()
		timeBound = TimeBound()
//		<LPAR>
		p = parseTemporalUnary()
//		<RPAR>
		{
			switch (type) {
			case NEXT:
				p = newTemporal(TemporalType.NEXT, p, timeBound);
				break;
			case FINALLY:
				p = newTemporal(TemporalType.FINALLY, p, timeBound);
				break;
			case GLOBALLY:
				p = newTemporal(TemporalType.GLOBALLY, p, timeBound);
				break;
			}
		}
	|
		p = ExpressionITE()
	)
	{ return p; }
}

private Expression parseBasicTemporal() throws EPMCException :
{
	Expression e;
}
{
	(
		e = parseCoalition()
	| 
		e = parseProperty()
	| 
		e = parseRewQuant()
	| 
		e = parseFilter()
	)
	{ return e; }
}


private UnType TempUnType() :
{
}
{
	(
		<X> 
		{ return UnType.NEXT; }
	| 
		<F> 
		{ return UnType.FINALLY; }
	| 
		<G> 
		{ return UnType.GLOBALLY; }
	)
}
