Inplementation of First Order Craig Interpolation

Interfaces are:

FociDag			Formula DAGs
Foci			Interpolating prover
Foci2			Another version of same

FOCI is written in OCAML.  You can call it directly from an OCAML
program.  To link the library, you need both libfoci.cma (the OCAML
code) and libcfoci.a (the C and C++ code). Libraries live in lib/,
while interface files live in include/ (in this directory, not the
parent).

The standalone version, foci.opt, reads formulas from a file
and outputs interpolants to a file. The file format is:

file ::  formula ; ... ; formula

formula :: propositional_variable
         | '=' term term
         | '<=' term term
         | '&' '[' formula ... formula ']'
         | '|' '[' formula ... formula ']'
         | '~' formula

term :: individual_variable
         | '+' '[' term ... term ']'
         | '*' number term
         | uninterpreted_function_symbol '[' term ... term ']'

Command line synax:

foci.opt [-s] input_file output_file

Asymmetric interpolation
------------------------

Without -s foci reads formula f_1 ... f_n and writes formulas g_1
.. g_(n-1) where each g_i is an interpolant for the pair (f_1 /\
... /\ f_i, f_(i+1) /\ ... /\ f_n), assuming /\_j f_j is
inconsistent. We guarantee that for all i in 1..n-2, g_i /\ f_(i+1)
implies g_(i+1).



Symmetric interpolation
-----------------------

With -s foci reads formula f_1 ... f_n and writes formulas g_1 .. g_n
where each g_i is an interpolant for the pair (f_i, f_1 /\ .. /\
f_(i-1) /\ f_(i+1) /\ ... /\ f_n)) assuming /\_j f_j is
inconsistent. We guarantee that /\_j g_j is inconsistent.

Currently, symmetric interpolation is only supprted in the disjoint
case, where no individual variables or function symbols are shared
between the f_i's (this the interpolants are purely propositional).




