/* Generated By:JavaCC: Do not edit this line. PrismExpressionParser.java */
package epmc.prism.expression;
import epmc.error.UtilError;
import epmc.prism.error.ProblemsPRISM;
import epmc.error.Positional;
import static epmc.error.UtilError.ensure;
import epmc.error.EPMCException;
import epmc.value.Operator;
import epmc.value.Value;
import epmc.value.ContextValue;
import epmc.value.OperatorAnd;
import epmc.value.OperatorNot;
import epmc.value.OperatorAddInverse;
import epmc.value.OperatorImplies;
import epmc.value.OperatorIff;
import epmc.value.OperatorOr;
import epmc.value.OperatorIte;
import epmc.value.OperatorEq;
import epmc.value.OperatorNe;
import epmc.value.OperatorAdd;
import epmc.value.OperatorSubtract;
import epmc.value.OperatorLe;
import epmc.value.OperatorLt;
import epmc.value.OperatorGe;
import epmc.value.OperatorGt;
import epmc.value.OperatorMultiply;
import epmc.value.OperatorDivide;
import epmc.value.OperatorPow;
import epmc.value.OperatorMax;
import epmc.value.OperatorMin;
import epmc.value.OperatorCeil;
import epmc.value.OperatorFloor;
import epmc.value.OperatorLog;
import epmc.value.OperatorMod;
import epmc.value.ValueInteger;
import epmc.value.TypeInteger;
import epmc.value.TypeReal;
import epmc.value.UtilValue;
import epmc.value.ValueAlgebra;
import epmc.expression.*;
import epmc.expression.standard.ExpressionIdentifierStandard;
import epmc.expression.standard.ExpressionFilter;
import epmc.expression.standard.ExpressionMultiObjective;
import epmc.expression.standard.ExpressionCoalition;
import epmc.expression.standard.ExpressionTemporal;
import epmc.expression.standard.ExpressionReward;
import epmc.expression.standard.ExpressionQuantifier;
import epmc.expression.standard.ExpressionSteadyState;
import epmc.expression.standard.ExpressionLiteral;
import epmc.expression.standard.ExpressionOperator;
import epmc.expression.standard.TemporalType;
import epmc.expression.standard.FilterType;
import epmc.expression.standard.TimeBound;
import epmc.expression.standard.RewardType;
import epmc.expression.standard.CmpType;
import epmc.expression.standard.DirType;

import java.util.ArrayList;
import java.util.List;

public final class PrismExpressionParser implements PrismExpressionParserConstants {
        private static enum UnType {
                NEXT,
                FINALLY,
                GLOBALLY
        };

        private static enum BinType {
                UNTIL,
                RELEASE,
                WEAK
        };

        private static class OldSchoolFilter {
                private final FilterType type;
                private final Expression states;

                OldSchoolFilter(FilterType type, Expression states) {
                        this.type = type;
                        this.states = states;
                }

                FilterType getType() {
                        return type;
                }

                Expression getStates() {
                        return states;
                }
        };

        private ContextValue contextVal;
        private int initialLine;
        private int initialColumn;
        private int errorLine;
        private int errorColumn;

        private void computeErrorPosition(int tline, int tcolumn) {
                errorLine = tline + initialLine - 1;
                errorColumn = tcolumn;
                if (tline == 1) {
                        errorColumn += initialColumn - 1;
                }
        }

        public Expression parseExpression(ContextValue contextVal) throws EPMCException {
                return parseExpression(contextVal, 1, 1);
        }

        public Expression parseExpression(ContextValue contextVal, int line, int column) throws EPMCException {
                this.contextVal = contextVal;
                this.initialLine = line;
                this.initialColumn = column;

                try {
                        return parseCompleteExp();
                } catch (ParseException pe) {
                        Token errorToken = getToken(1);
                        if (errorToken.kind == UNEXPECTED_CHAR) {
                                computeErrorPosition(errorToken.endLine, errorToken.endColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_CHARACTER, newPositional(errorLine, errorColumn), errorToken.image);
                        } else {
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_SYNTAX_ERROR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
                        return null;
        } catch (EPMCException e) {
                   throw e;
                }
                catch (Throwable t) {
                  ensure(false, ProblemsPRISM.EXPRESSION_PARSER_GENERAL_ERROR, t, t);
                  return null;
                }
        }

        public Expression parseExpressionAsProperty(ContextValue contextVal) throws EPMCException {
                return parseExpressionAsProperty(contextVal, 1, 1);
        }

        public Expression parseExpressionAsProperty(ContextValue contextVal, int line, int column) throws EPMCException {
                this.contextVal = contextVal;
                this.initialLine = line;
                this.initialColumn = column;

                try {
                        return parseCompleteProp();
                } catch (ParseException pe) {
                        Token errorToken = getToken(1);
                        if (errorToken.kind == UNEXPECTED_CHAR) {
                                computeErrorPosition(errorToken.endLine, errorToken.endColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_CHARACTER, newPositional(errorLine, errorColumn), errorToken.image);
                        } else {
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_SYNTAX_ERROR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
                        return null;
                } catch (EPMCException e) {
                   throw e;
                } catch (Throwable t) {
                          ensure(false, ProblemsPRISM.EXPRESSION_PARSER_GENERAL_ERROR, t, t);
                          return null;
                }
        }

        private ExpressionOperator newOperator(Operator operator, Expression... operands) {
          return new ExpressionOperator.Builder()
                .setOperator(operator)
                .setOperands(operands)
                .build();
        }

        private ExpressionOperator newOperator(String operator, Expression... operands) {
          return new ExpressionOperator.Builder()
                .setOperator(contextVal.getOperator(operator))
                .setOperands(operands)
                .build();
        }

  private Expression and(Expression a, Expression b) {
      return newOperator(OperatorAnd.IDENTIFIER, a, b);
  }

    private Expression not(Expression expression) {
        return new ExpressionOperator.Builder()
                .setOperator(contextVal.getOperator(OperatorNot.IDENTIFIER))
                .setOperands(expression)
                .build();
    }

  private Expression addInverse(Expression expression) {
    return new ExpressionOperator.Builder()
        .setOperator(contextVal.getOperator(OperatorAddInverse.IDENTIFIER))
        .setOperands(expression)
        .build();
  }

    private Expression or(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorOr.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private Expression iff(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorIff.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private Expression implies(Expression a, Expression b) {
        return new ExpressionOperator.Builder()
            .setOperator(contextVal.getOperator(OperatorImplies.IDENTIFIER))
            .setOperands(a, b)
            .build();
    }

    private static boolean isPosInf(Expression expression) {
        assert expression != null;
        if (!(expression instanceof ExpressionLiteral)) {
            return false;
        }
        ExpressionLiteral expressionLiteral = (ExpressionLiteral) expression;
        return ValueAlgebra.asAlgebra(expressionLiteral.getValue()).isPosInf();
    }

    private ExpressionReward newRewardSteadyState(Expression structure) {
        return new ExpressionReward.Builder()
                        .setContext(contextVal)
                .setReward(structure)
                .setRewardType(RewardType.STEADYSTATE)
                .build();
    }

    private TimeBound newTimeBound(Expression left, Expression right,
            boolean leftOpen, boolean rightOpen) {
        return new TimeBound.Builder()
                        .setContext(contextVal)
                .setLeft(left)
                .setRight(right)
                .setLeftOpen(leftOpen)
                .setRightOpen(rightOpen)
                .build();
    }

    private TimeBound newTimeBound() {
        return new TimeBound.Builder()
                        .setContext(contextVal)
                .build();
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, List<Expression> operands,
            List<TimeBound> timeBounds) {
        assert type != null;
        assert operands != null;
        assert operands != null;
        assert timeBounds != null;
        for (TimeBound timeBound : timeBounds) {
            assert timeBound != null;
        }
        return new ExpressionTemporal
                (operands, type, timeBounds, null);
    }

    private ExpressionReward newRewardInstantaneous
    (Expression structure, Expression time) {
        return new ExpressionReward.Builder()
                        .setContext(contextVal)
                .setRewardType(RewardType.INSTANTANEOUS)
                .setReward(structure)
                .setTime(time)
                .build();
    }

    private ExpressionReward newRewardReachability
    (Expression structure, Expression reachSet) {
        return new ExpressionReward.Builder()
                        .setContext(contextVal)
                .setRewardType(RewardType.REACHABILITY)
                .setReward(structure)
                .setReachSet(reachSet)
                .build();
    }

    private ExpressionReward newRewardCumulative
    (Expression structure, Expression time) {
        return new ExpressionReward.Builder()
                        .setContext(contextVal)
                .setRewardType(RewardType.CUMULATIVE)
                .setReward(structure)
                .setTime(time)
                .build();
    }

    private ExpressionReward newRewardDiscounted
    (Expression structure, Expression timebound, Expression discount) {
        return new ExpressionReward.Builder()
                        .setContext(contextVal)
                .setRewardType(RewardType.DISCOUNTED)
                .setReward(structure)
                .setTime(timebound)
                .setDiscount(discount)
                .build();
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, Expression operand, TimeBound bound) {
        assert type != null;
        assert bound != null;
        return new ExpressionTemporal
                (operand, type, bound, null);
    }

    private static ExpressionTemporal newTemporal
    (TemporalType type, Expression op1, Expression op2,
            TimeBound bound) {
        assert type != null;
        assert bound != null;
        return new ExpressionTemporal
                (op1, op2, type, bound, null);
    }

    private ValueInteger newValueInteger(String string) throws EPMCException {
      assert string != null;
      return UtilValue.newValue(TypeInteger.get(contextVal), string);
    }

    private static Positional newPositional(long line, long column) {
        assert line >= 0;
        assert column >= 0;
        return new Positional.Builder()
                .setLine(line)
                .setColumn(column)
                .build();
    }

  final private Expression parseCompleteExp() throws ParseException, EPMCException {
        Expression e;
    e = parseExp(true);
    jj_consume_token(0);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseCompleteProp() throws ParseException, EPMCException {
        Expression e;
        Expression label = null;
    if (jj_2_1(2147483647)) {
      label = parseLabel();
      jj_consume_token(COLON);
    } else {
      ;
    }
    e = parseExp(false);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExpTemporal(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
    e = parseTemporalBinary(parseExp);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseExp(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
    e = ExpressionITE(parseExp);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionITE(boolean parseExp) throws ParseException, EPMCException {
        Expression prop;
        Expression propThen;
        Expression propElse;
    prop = ExpressionImplies(parseExp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      jj_consume_token(QUESTION);
      propThen = ExpressionImplies(parseExp);
      jj_consume_token(COLON);
      propElse = ExpressionITE(parseExp);
                  prop = new ExpressionOperator.Builder()
                        .setOperator(contextVal.getOperator(OperatorIte.IDENTIFIER))
                        .setOperands(prop, propThen, propElse)
                        .build();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
          {if (true) return prop;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionImplies(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
    p = ExpressionIff(parseExp);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(IMPLIES);
      nextProp = ExpressionIff(parseExp);
                  p = implies(p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionIff(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
    p = ExpressionOr(parseExp);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IFF:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(IFF);
      nextProp = ExpressionOr(parseExp);
                  p = iff(p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionOr(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
    p = ExpressionAnd(parseExp);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      nextProp = ExpressionAnd(parseExp);
                  p = or(p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionAnd(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
    p = ExpressionNot(parseExp);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      nextProp = ExpressionNot(parseExp);
                  p = and(p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionNot(boolean parseExp) throws ParseException, EPMCException {
          Expression p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      p = ExpressionNot(parseExp);
                  p = not(p);
      break;
    case CEIL:
    case FALSE:
    case FILTER:
    case FLOOR:
    case FUNCTION:
    case LOG:
    case MAX:
    case MIN:
    case MOD:
    case MULTIOBJECTIVE:
    case P:
    case PMAX:
    case PMIN:
    case POW:
    case R:
    case RMAX:
    case RMIN:
    case S:
    case SMAX:
    case SMIN:
    case SQRT:
    case TRUE:
    case MINUS:
    case LPAR:
    case QUOTE:
    case COALITION_OPEN:
    case IDENTIFIER:
    case NUM_INT:
    case NUM_REAL:
      p = ExpressionEqNe(parseExp);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionEqNe(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
        Operator type;
    p = ExpressionROp(parseExp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NEQ:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      type = EqNe();
      nextProp = ExpressionROp(parseExp);
                  p = newOperator(type, p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator EqNe() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
                  {if (true) return contextVal.getOperator(OperatorEq.IDENTIFIER);}
      break;
    case NEQ:
      jj_consume_token(NEQ);
                  {if (true) return contextVal.getOperator(OperatorNe.IDENTIFIER);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionROp(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
        Operator type;
    p = ExpressionPlusMinus(parseExp);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEQ:
      case LT:
      case GT:
      case GEQ:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      type = LtGtLeGe();
      nextProp = ExpressionPlusMinus(parseExp);
                  p = newOperator(type, p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator LtGtLeGe() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
                  {if (true) return contextVal.getOperator(OperatorLt.IDENTIFIER);}
      break;
    case LEQ:
      jj_consume_token(LEQ);
                  {if (true) return contextVal.getOperator(OperatorLe.IDENTIFIER);}
      break;
    case GT:
      jj_consume_token(GT);
                  {if (true) return contextVal.getOperator(OperatorGt.IDENTIFIER);}
      break;
    case GEQ:
      jj_consume_token(GEQ);
                  {if (true) return contextVal.getOperator(OperatorGe.IDENTIFIER);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionPlusMinus(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
        Operator type;
    p = ExpressionTimesDivide(parseExp);
    label_7:
    while (true) {
      if (jj_2_2(2147483647)) {
        ;
      } else {
        break label_7;
      }
      type = PlusMinus();
      nextProp = ExpressionTimesDivide(parseExp);
                  p = newOperator(type, p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator PlusMinus() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
                  {if (true) return contextVal.getOperator(OperatorAdd.IDENTIFIER);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
                  {if (true) return contextVal.getOperator(OperatorSubtract.IDENTIFIER);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionTimesDivide(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        Expression nextProp;
        Operator type;
    p = ExpressionUnaryMinus(parseExp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      type = TimesDivide();
      nextProp = ExpressionUnaryMinus(parseExp);
                  p = newOperator(type, p, nextProp);
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator TimesDivide() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
                  {if (true) return contextVal.getOperator(OperatorMultiply.IDENTIFIER);}
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
                  {if (true) return contextVal.getOperator(OperatorDivide.IDENTIFIER);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression ExpressionUnaryMinus(boolean parseExp) throws ParseException, EPMCException {
          Expression p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      p = ExpressionUnaryMinus(parseExp);
                  p = addInverse(p);
      break;
    case CEIL:
    case FALSE:
    case FILTER:
    case FLOOR:
    case FUNCTION:
    case LOG:
    case MAX:
    case MIN:
    case MOD:
    case MULTIOBJECTIVE:
    case P:
    case PMAX:
    case PMIN:
    case POW:
    case R:
    case RMAX:
    case RMIN:
    case S:
    case SMAX:
    case SMIN:
    case SQRT:
    case TRUE:
    case LPAR:
    case QUOTE:
    case COALITION_OPEN:
    case IDENTIFIER:
    case NUM_INT:
    case NUM_REAL:
      p = parseBasic(parseExp);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBasic(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
      e = parseBoolean();
      break;
    case CEIL:
    case FLOOR:
    case FUNCTION:
    case LOG:
    case MAX:
    case MIN:
    case MOD:
    case POW:
    case SQRT:
      e = parseFunction(parseExp);
      break;
    case IDENTIFIER:
      e = parseIdentifier();
      break;
    case NUM_INT:
      e = parseInt();
      break;
    case NUM_REAL:
      e = parseReal();
      break;
    case COALITION_OPEN:
      e = parseCoalition(parseExp);
      break;
    case P:
    case PMAX:
    case PMIN:
      e = parseProbQuant(parseExp);
      break;
    case R:
    case RMAX:
    case RMIN:
      e = parseRewQuant(parseExp);
      break;
    case S:
    case SMAX:
    case SMIN:
      e = parseSteadyQuant(parseExp);
      break;
    case LPAR:
      e = parseParenth(parseExp);
      break;
    case QUOTE:
      e = parseLabel();
      break;
    case FILTER:
      e = parseFilter(parseExp);
      break;
    case MULTIOBJECTIVE:
      e = parseMultiObjective(parseExp);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
        Expression ne;
        Operator type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SQRT:
      e = parseSpecialFunction(parseExp);
      break;
    case MAX:
    case MIN:
      type = functionMultipleParams();
      jj_consume_token(LPAR);
      e = parseFunctionN(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case LOG:
    case MOD:
    case POW:
      type = functionTwoParams();
      jj_consume_token(LPAR);
      e = parseFunction2(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case CEIL:
    case FLOOR:
      type = functionOneParam();
      jj_consume_token(LPAR);
      e = parseFunction1(parseExp, type);
      jj_consume_token(RPAR);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQRT:
        e = parseSqrt(parseExp);
        break;
      case MAX:
      case MIN:
        type = functionMultipleParams();
        jj_consume_token(COMMA);
        e = parseFunctionN(parseExp, type);
        break;
      case LOG:
      case MOD:
      case POW:
        type = functionTwoParams();
        jj_consume_token(COMMA);
        e = parseFunction2(parseExp, type);
        break;
      case CEIL:
      case FLOOR:
        type = functionOneParam();
        jj_consume_token(COMMA);
        e = parseFunction1(parseExp, type);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSpecialFunction(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
    e = parseSqrt(parseExp);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSqrt(boolean parseExp) throws ParseException, EPMCException {
        Expression e;
    jj_consume_token(SQRT);
    jj_consume_token(LPAR);
    e = parseExp(parseExp);
    jj_consume_token(RPAR);
          {if (true) return newOperator(contextVal.getOperator(OperatorPow.IDENTIFIER), e,
                new ExpressionLiteral.Builder()
                        .setValue(UtilValue.newValue(TypeReal.get(contextVal), "0.5"))
                        .build());}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunctionN(boolean parseExp, Operator type) throws ParseException, EPMCException {
        Expression e;
        Expression ne;
    e = parseExp(parseExp);
    label_9:
    while (true) {
      jj_consume_token(COMMA);
      ne = parseExp(parseExp);
                  e = newOperator(type, e, ne);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction2(boolean parseExp, Operator type) throws ParseException, EPMCException {
        Expression e;
        Expression ne;
    e = parseExp(parseExp);
    jj_consume_token(COMMA);
    ne = parseExp(parseExp);
          {if (true) return newOperator(type, e, ne);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFunction1(boolean parseExp, Operator type) throws ParseException, EPMCException {
        Expression e;
    e = parseExp(parseExp);
          {if (true) return newOperator(type, e);}
    throw new Error("Missing return statement in function");
  }

  final private Operator functionMultipleParams() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAX:
      jj_consume_token(MAX);
                  {if (true) return contextVal.getOperator(OperatorMax.IDENTIFIER);}
      break;
    case MIN:
      jj_consume_token(MIN);
                  {if (true) return contextVal.getOperator(OperatorMin.IDENTIFIER);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Operator functionOneParam() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOOR:
      jj_consume_token(FLOOR);
                  {if (true) return contextVal.getOperator(OperatorFloor.IDENTIFIER);}
      break;
    case CEIL:
      jj_consume_token(CEIL);
                  {if (true) return contextVal.getOperator(OperatorCeil.IDENTIFIER);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Operator functionTwoParams() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
                  {if (true) return contextVal.getOperator(OperatorPow.IDENTIFIER);}
      break;
    case MOD:
      jj_consume_token(MOD);
                  {if (true) return contextVal.getOperator(OperatorMod.IDENTIFIER);}
      break;
    case LOG:
      jj_consume_token(LOG);
                  {if (true) return contextVal.getOperator(OperatorLog.IDENTIFIER);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseParenth(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
    jj_consume_token(LPAR);
    p = parseExpTemporal(parseExp);
    jj_consume_token(RPAR);
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseIdentifier() throws ParseException, EPMCException {
        Token literal;
    literal = jj_consume_token(IDENTIFIER);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName(literal.toString())
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseLabel() throws ParseException, EPMCException {
        Token literal;
    jj_consume_token(QUOTE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      literal = jj_consume_token(IDENTIFIER);
      break;
    case INIT:
      literal = jj_consume_token(INIT);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(QUOTE);
          {if (true) return new ExpressionIdentifierStandard.Builder()
                .setName("\u005c"" + literal.toString() + "\u005c"")
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseReal() throws ParseException, EPMCException {
        Token real;
    real = jj_consume_token(NUM_REAL);
          {if (true) return new ExpressionLiteral.Builder()
                .setValue(UtilValue.newValue(TypeReal.get(contextVal), real.toString()))
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseInt() throws ParseException, EPMCException {
        Token intg;
    intg = jj_consume_token(NUM_INT);
          {if (true) return new ExpressionLiteral.Builder()
                .setValue(newValueInteger(intg.toString()))
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private List<Expression> parseList(boolean parseExp) throws ParseException, EPMCException {
        List<Expression> vector = new ArrayList<Expression>();
        Expression element;
    element = parseExp(parseExp);
          vector.add(element);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      element = parseExp(parseExp);
                  vector.add(element);
    }
          {if (true) return vector;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseBoolean() throws ParseException, EPMCException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                  {if (true) return ExpressionLiteral.getTrue(contextVal);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return ExpressionLiteral.getFalse(contextVal);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private OldSchoolFilter OldSchoolFilter() throws ParseException, EPMCException {
        Expression states;
        boolean min = false;
        boolean max = false;
    jj_consume_token(LCURL);
    states = parseExpTemporal(false);
    jj_consume_token(RCURL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURL:
      jj_consume_token(LCURL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
        jj_consume_token(MAX);
        jj_consume_token(RCURL);
                          max = true;
        break;
      case MIN:
        jj_consume_token(MIN);
        jj_consume_token(RCURL);
                          min = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LCURL:
          jj_consume_token(LCURL);
          jj_consume_token(MAX);
          jj_consume_token(RCURL);
                                  max = true;
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                FilterType type = null;
                if (!min && !max) {
                        type = FilterType.STATE;
                } else if (min && !max) {
                        type = FilterType.MIN;
                } else if (!min && max) {
                        type = FilterType.MAX;
                } else if (min && max) {
                        type = FilterType.RANGE;
                }
                {if (true) return new OldSchoolFilter(type, states);}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseCoalition(boolean parseExp) throws ParseException, EPMCException {
        Expression innerFormula;
        List<Expression> players = new ArrayList<Expression>();
        Token coal;
        Expression player;
    coal = jj_consume_token(COALITION_OPEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      player = parseIdentifier();
      break;
    case NUM_INT:
      player = parseInt();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          players.add(player);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        player = parseIdentifier();
        break;
      case NUM_INT:
        player = parseInt();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  players.add(player);
    }
    jj_consume_token(COALITION_CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P:
    case PMAX:
    case PMIN:
      innerFormula = parseProbQuant(parseExp);
      break;
    case R:
    case RMAX:
    case RMIN:
      innerFormula = parseRewQuant(parseExp);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ExpressionCoalition.Builder()
                .setQuantifier(innerFormula).setPlayers(players)
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseProbQuant(boolean parseExp) throws ParseException, EPMCException {
        Expression prop;
        Expression cmp;
        Expression cond = ExpressionLiteral.getTrue(contextVal);
        DirType dirType;
        CmpType cmpType;
        OldSchoolFilter filter = null;
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken);
                        {if (true) return null;}
                }
    dirType = PropQuantProbDirType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                        cmpType = CmpType.IS;
                                        cmp = ExpressionLiteral.getTrue(contextVal);
        break;
      case CEIL:
      case FALSE:
      case FILTER:
      case FLOOR:
      case FUNCTION:
      case F:
      case G:
      case LOG:
      case MAX:
      case MIN:
      case MOD:
      case MULTIOBJECTIVE:
      case P:
      case PMAX:
      case PMIN:
      case POW:
      case R:
      case RMAX:
      case RMIN:
      case S:
      case SMAX:
      case SMIN:
      case SQRT:
      case TRUE:
      case X:
      case MINUS:
      case LPAR:
      case NOT:
      case QUOTE:
      case COALITION_OPEN:
      case IDENTIFIER:
      case NUM_INT:
      case NUM_REAL:
        cmp = parseExpTemporal(parseExp);
                                  cmpType = CmpType.EQ;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                Expression result = new ExpressionQuantifier.Builder()
                        .setContext(contextVal)
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .build();
                if (filter != null) {
                  result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseSteadyQuant(boolean parseExp) throws ParseException, EPMCException {
        Expression prop;
        Expression cmp;
        Expression cond = ExpressionLiteral.getTrue(contextVal);
        DirType dirType;
        CmpType cmpType;
        OldSchoolFilter filter = null;
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        {if (true) return null;}
                }
    dirType = SteadyQuantProbDirType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                cmpType = CmpType.IS;
                                cmp = ExpressionLiteral.getTrue(contextVal);
        break;
      case CEIL:
      case FALSE:
      case FILTER:
      case FLOOR:
      case FUNCTION:
      case F:
      case G:
      case LOG:
      case MAX:
      case MIN:
      case MOD:
      case MULTIOBJECTIVE:
      case P:
      case PMAX:
      case PMIN:
      case POW:
      case R:
      case RMAX:
      case RMIN:
      case S:
      case SMAX:
      case SMIN:
      case SQRT:
      case TRUE:
      case X:
      case MINUS:
      case LPAR:
      case NOT:
      case QUOTE:
      case COALITION_OPEN:
      case IDENTIFIER:
      case NUM_INT:
      case NUM_REAL:
        cmp = parseExpTemporal(parseExp);
                          cmpType = CmpType.EQ;
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      jj_consume_token(LBRACKET);
      prop = parseExpTemporal(parseExp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COND:
        jj_consume_token(COND);
        cond = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        filter = OldSchoolFilter();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                prop = new ExpressionSteadyState.Builder()
                        .setStates(prop)
                        .build();
                Expression result = new ExpressionQuantifier.Builder()
                        .setContext(contextVal)
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .build();
                if (filter != null) {
                        result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final private CmpType PropQuantCmpType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEQ:
      jj_consume_token(LEQ);
                  {if (true) return CmpType.LE;}
      break;
    case LT:
      jj_consume_token(LT);
                  {if (true) return CmpType.LT;}
      break;
    case GEQ:
      jj_consume_token(GEQ);
                  {if (true) return CmpType.GE;}
      break;
    case GT:
      jj_consume_token(GT);
                  {if (true) return CmpType.GT;}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewardPath(boolean parseExp, Expression rewardStructure) throws ParseException, EPMCException {
        Expression prop;
        Expression timebound;
        Expression discount;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case F:
      jj_consume_token(F);
      prop = parseExpTemporal(parseExp);
                  {if (true) return newRewardReachability(rewardStructure, prop);}
      break;
    case C:
      jj_consume_token(C);
                  timebound = ExpressionLiteral.getPosInf(contextVal);
                  discount = ExpressionLiteral.getPosInf(contextVal);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEQ:
        jj_consume_token(LEQ);
        timebound = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        jj_consume_token(DISCOUNT);
        jj_consume_token(EQ);
        discount = parseExpTemporal(parseExp);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
                        if (isPosInf(discount)) {
                                {if (true) return newRewardCumulative(rewardStructure, timebound);}
                        } else {
                                {if (true) return newRewardDiscounted(rewardStructure, timebound, discount);}
                        }
      break;
    case I:
      jj_consume_token(I);
      jj_consume_token(EQ);
      prop = parseExpTemporal(parseExp);
                  {if (true) return newRewardInstantaneous(rewardStructure, prop);}
      break;
    case S:
      jj_consume_token(S);
                  {if (true) return newRewardSteadyState(rewardStructure);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewardStructure(boolean parseExp) throws ParseException, EPMCException {
        Expression rewardStructure = null;
        Token literal;
    jj_consume_token(LCURL);
    if (jj_2_3(2147483647)) {
      jj_consume_token(QUOTE);
      literal = jj_consume_token(IDENTIFIER);
      jj_consume_token(QUOTE);
                  rewardStructure = new ExpressionIdentifierStandard.Builder()
                        .setName("\u005c"" + literal.toString() + "\u005c"")
                        .build();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CEIL:
      case FALSE:
      case FILTER:
      case FLOOR:
      case FUNCTION:
      case LOG:
      case MAX:
      case MIN:
      case MOD:
      case MULTIOBJECTIVE:
      case P:
      case PMAX:
      case PMIN:
      case POW:
      case R:
      case RMAX:
      case RMIN:
      case S:
      case SMAX:
      case SMIN:
      case SQRT:
      case TRUE:
      case MINUS:
      case LPAR:
      case NOT:
      case QUOTE:
      case COALITION_OPEN:
      case IDENTIFIER:
      case NUM_INT:
      case NUM_REAL:
        rewardStructure = parseExp(true);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RCURL);
          {if (true) return rewardStructure;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseRewQuant(boolean parseExp) throws ParseException, EPMCException {
        Expression prop;
        Expression cmp;
        Expression cond = ExpressionLiteral.getTrue(contextVal);
        DirType dirType;
        CmpType cmpType;
        Expression rewardStructure = ExpressionLiteral.getTrue(contextVal);
        OldSchoolFilter filter = null;
        Token oper;
          oper = getToken(1);
                if (parseExp) {
                    ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(oper.beginLine, oper.beginColumn),  oper.toString());
                    {if (true) return null;}
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case R:
      jj_consume_token(R);
                  dirType = DirType.NONE;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURL:
        rewardStructure = parseRewardStructure(parseExp);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAX:
      case MIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MIN:
          jj_consume_token(MIN);
                          dirType = DirType.MIN;
          break;
        case MAX:
          jj_consume_token(MAX);
                          dirType = DirType.MAX;
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      break;
    case RMIN:
      jj_consume_token(RMIN);
                  dirType = DirType.MIN;
      break;
    case RMAX:
      jj_consume_token(RMAX);
                  dirType = DirType.MAX;
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
                        cmpType = CmpType.IS;
                        cmp = ExpressionLiteral.getTrue(contextVal);
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTION:
        jj_consume_token(QUESTION);
                                cmpType = CmpType.IS;
                                cmp = ExpressionLiteral.getTrue(contextVal);
        break;
      case CEIL:
      case FALSE:
      case FILTER:
      case FLOOR:
      case FUNCTION:
      case F:
      case G:
      case LOG:
      case MAX:
      case MIN:
      case MOD:
      case MULTIOBJECTIVE:
      case P:
      case PMAX:
      case PMIN:
      case POW:
      case R:
      case RMAX:
      case RMIN:
      case S:
      case SMAX:
      case SMIN:
      case SQRT:
      case TRUE:
      case X:
      case MINUS:
      case LPAR:
      case NOT:
      case QUOTE:
      case COALITION_OPEN:
      case IDENTIFIER:
      case NUM_INT:
      case NUM_REAL:
        cmp = parseExpTemporal(parseExp);
                          cmpType = CmpType.EQ;
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      cmpType = PropQuantCmpType();
      cmp = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    prop = parseRewardPath(parseExp, rewardStructure);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COND:
      jj_consume_token(COND);
      cond = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURL:
      filter = OldSchoolFilter();
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
                Expression result = new ExpressionQuantifier.Builder()
                        .setContext(contextVal)
                        .setDirType(dirType)
                        .setCmpType(cmpType)
                        .setQuantified(prop)
                        .setCompare(cmp)
                        .setCondition(cond)
                        .build();
                if (filter != null) {
                        result = new ExpressionFilter.Builder()
                                .setFilterType(filter.getType())
                                .setProp(result)
                                .setStates(filter.getStates())
                                .build();
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public DirType PropQuantProbDirType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P:
      jj_consume_token(P);
                  {if (true) return DirType.NONE;}
      break;
    case PMAX:
      jj_consume_token(PMAX);
                  {if (true) return DirType.MAX;}
      break;
    case PMIN:
      jj_consume_token(PMIN);
                  {if (true) return DirType.MIN;}
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private DirType SteadyQuantProbDirType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S:
      jj_consume_token(S);
                  {if (true) return DirType.NONE;}
      break;
    case SMAX:
      jj_consume_token(SMAX);
                  {if (true) return DirType.MAX;}
      break;
    case SMIN:
      jj_consume_token(SMIN);
                  {if (true) return DirType.MIN;}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private FilterType ExpressionFilterType() throws ParseException, EPMCException {
        FilterType type = null;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
                  type = FilterType.MIN;
      break;
    case MAX:
      jj_consume_token(MAX);
                  type = FilterType.MAX;
      break;
    case PLUS:
      jj_consume_token(PLUS);
                  type = FilterType.SUM;
      break;
    case AND:
      jj_consume_token(AND);
                  type = FilterType.FORALL;
      break;
    case OR:
      jj_consume_token(OR);
                  type = FilterType.EXISTS;
      break;
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
                        switch (id.image) {
                                case "count" :
                                        type = FilterType.COUNT;
                                        break;
                                case "sum" :
                                        type = FilterType.SUM;
                                        break;
                                case "avg":
                                        type = FilterType.AVG;
                                        break;
                                case "first":
                                        type = FilterType.FIRST;
                                        break;
                                case "range":
                                        type = FilterType.RANGE;
                                        break;
                                case "forall":
                                        type = FilterType.FORALL;
                                        break;
                                case "exists":
                                        type = FilterType.EXISTS;
                                        break;
                                case "state":
                                        type = FilterType.STATE;
                                        break;
                                case "argmin":
                                        type = FilterType.ARGMIN;
                                        break;
                                case "argmax":
                                        type = FilterType.ARGMAX;
                                        break;
                                case "print":
                                        type = FilterType.PRINT;
                                        break;
                                case "printall":
                                        type = FilterType.PRINTALL;
                                        break;
                                default:
                                        computeErrorPosition(id.beginLine, id.beginColumn);
                                        ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNKNOWN_FILTER_TYPE, newPositional(errorLine, errorColumn), id.toString());
                        }
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseFilter(boolean parseExp) throws ParseException, EPMCException {
        FilterType type;
        Expression prop;
        Expression states = ExpressionLiteral.getTrue(contextVal);
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                }
    jj_consume_token(FILTER);
    jj_consume_token(LPAR);
    type = ExpressionFilterType();
    jj_consume_token(COMMA);
    prop = parseExpTemporal(parseExp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      states = parseExpTemporal(parseExp);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
          {if (true) return new ExpressionFilter.Builder()
                .setFilterType(type)
                .setProp(prop)
                .setStates(states)
                .build();}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseMultiObjective(boolean parseExp) throws ParseException, EPMCException {
        Expression formula;
        List<Expression> list = new ArrayList<Expression>();
                if (parseExp) {
                        Token errorToken = getToken(1);
                        computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                        ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                }
    jj_consume_token(MULTIOBJECTIVE);
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P:
    case PMAX:
    case PMIN:
      formula = parseProbQuant(parseExp);
      break;
    case R:
    case RMAX:
    case RMIN:
      formula = parseRewQuant(parseExp);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          list.add(formula);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case P:
      case PMAX:
      case PMIN:
        formula = parseProbQuant(parseExp);
        break;
      case R:
      case RMAX:
      case RMIN:
        formula = parseRewQuant(parseExp);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  list.add(formula);
    }
    jj_consume_token(RPAR);
          {if (true) return new ExpressionMultiObjective.Builder()
                .setOperands(list)
                .build();}
    throw new Error("Missing return statement in function");
  }

//private Expression parseExpAsProp(boolean parseExp) throws EPMCException :
//{
//	Expression p;
//}
//{
//	p = parseTemporalBinary(parseExp)
//	{ return p; }
//}
  final public TimeBound TimeBound() throws ParseException, EPMCException {
        Expression left;
        Expression right;
        TimeBound timeBound = newTimeBound();
        boolean leftOpen = true;
        boolean rightOpen = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case RBRACKET:
    case LEQ:
    case LT:
    case GT:
    case GEQ:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        //		right = parseExpForTimeBound(true)
                        right = parseExp(true);
                  timeBound = newTimeBound(ExpressionLiteral.getZero(contextVal), right, false, true);
        break;
      case LEQ:
        jj_consume_token(LEQ);
        //		right = parseExpForTimeBound(true)
                        right = parseExp(true);
                  timeBound = newTimeBound(ExpressionLiteral.getZero(contextVal), right, false, false);
        break;
      case GT:
        jj_consume_token(GT);
        //		left = parseExpForTimeBound(true)
                        left = parseExp(true);
                  timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(contextVal), true, true);
        break;
      case GEQ:
        jj_consume_token(GEQ);
        //		left = parseExpForTimeBound(true)
                        left = parseExp(true);
                  timeBound = newTimeBound(left, ExpressionLiteral.getPosInf(contextVal), false, true);
        break;
      case LBRACKET:
      case RBRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
                          leftOpen = false;
          break;
        case RBRACKET:
          jj_consume_token(RBRACKET);
                          leftOpen = true;
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        left = parseExp(true);
        jj_consume_token(COMMA);
        right = parseExp(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RBRACKET:
          jj_consume_token(RBRACKET);
                          rightOpen = false;
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
                          rightOpen = true;
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                  timeBound = newTimeBound(left, right, leftOpen, rightOpen);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
          {if (true) return timeBound;}
    throw new Error("Missing return statement in function");
  }

  final private Expression parseTemporalBinary(boolean parseExp) throws ParseException, EPMCException {
        ArrayList<Expression> expressions = new ArrayList<Expression>();
        ArrayList<TimeBound> timeBounds = new ArrayList<TimeBound>();
        Expression p;
        TimeBound timeBound;
        BinType lastType = null;
        BinType type = null;
        Token oper;
    p = parseTemporalUnary(parseExp);
          expressions.add(p);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case R:
    case U:
    case W:
                  oper = getToken(1);
                        if (parseExp) {
                                Token errorToken = getToken(1);
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
      type = TempBinType();
                        if (lastType != null) {
                                if (lastType != BinType.UNTIL || type != BinType.UNTIL) {
                                  ensure(false, ProblemsPRISM.PARSE_ERROR_MULTI_UNTIL, newPositional(token.endLine, token.endColumn), token.image);
                                }
                        }
                        lastType = type;
      timeBound = TimeBound();
                  timeBounds.add(timeBound);
      //		<LPAR>
                      p = parseTemporalBinary(parseExp);
                  expressions.add(p);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
                if (expressions.size() == 1) {
                        {if (true) return p;}
                } else {
                        switch (type) {
                        case RELEASE:
                                {if (true) return newTemporal(TemporalType.RELEASE, expressions, timeBounds);}
                        case UNTIL:
                                {if (true) return newTemporal(TemporalType.UNTIL, expressions, timeBounds);}
                        case WEAK: {
                                Expression or = or(expressions.get(0), expressions.get(1));
                                {if (true) return newTemporal(TemporalType.RELEASE, expressions.get(1), or, timeBounds.get(0));}
                        }
                        default:
                                assert(false);
                                {if (true) return null;}
                        }
                }
    throw new Error("Missing return statement in function");
  }

  final private BinType TempBinType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case W:
      jj_consume_token(W);
                  {if (true) return BinType.WEAK;}
      break;
    case R:
      jj_consume_token(R);
                  {if (true) return BinType.RELEASE;}
      break;
    case U:
      jj_consume_token(U);
                  {if (true) return BinType.UNTIL;}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Expression parseTemporalUnary(boolean parseExp) throws ParseException, EPMCException {
        Expression p;
        UnType type;
        TimeBound timeBound;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case F:
    case G:
    case X:
                        if (parseExp) {
                                Token errorToken = getToken(1);
                                computeErrorPosition(errorToken.beginLine, errorToken.beginColumn);
                                ensure(false, ProblemsPRISM.EXPRESSION_PARSER_UNEXPECTED_LOGIC_OPERATOR, newPositional(errorLine, errorColumn), errorToken.toString());
                        }
      type = TempUnType();
      timeBound = TimeBound();
      //		<LPAR>
                      p = parseTemporalUnary(parseExp);
                        switch (type) {
                        case NEXT:
                                p = newTemporal(TemporalType.NEXT, p, timeBound);
                                break;
                        case FINALLY:
                                p = newTemporal(TemporalType.FINALLY, p, timeBound);
                                break;
                        case GLOBALLY:
                                p = newTemporal(TemporalType.GLOBALLY, p, timeBound);
                                break;
                        }
      break;
    case CEIL:
    case FALSE:
    case FILTER:
    case FLOOR:
    case FUNCTION:
    case LOG:
    case MAX:
    case MIN:
    case MOD:
    case MULTIOBJECTIVE:
    case P:
    case PMAX:
    case PMIN:
    case POW:
    case R:
    case RMAX:
    case RMIN:
    case S:
    case SMAX:
    case SMIN:
    case SQRT:
    case TRUE:
    case MINUS:
    case LPAR:
    case NOT:
    case QUOTE:
    case COALITION_OPEN:
    case IDENTIFIER:
    case NUM_INT:
    case NUM_REAL:
      p = ExpressionITE(parseExp);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private UnType TempUnType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X:
      jj_consume_token(X);
                  {if (true) return UnType.NEXT;}
      break;
    case F:
      jj_consume_token(F);
                  {if (true) return UnType.FINALLY;}
      break;
    case G:
      jj_consume_token(G);
                  {if (true) return UnType.GLOBALLY;}
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_3() {
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PrismExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[72];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x3a0080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3a0080,0x3a0080,0x100080,0x300080,0x0,0x0,0x100080,0x0,0x2000000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17a0080,0x0,0x0,0x0,0x0,0x0,0x17a0080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20401000,0x3a0080,0x0,0x0,0x0,0x0,0x17a0080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17a0080,0x1400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x8fc47a6a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8fc47a6a,0x8fc47a6a,0x800406a,0x800406a,0x0,0x28,0x0,0x4042,0x0,0x0,0x80000000,0x0,0x28,0x0,0x0,0x0,0x0,0xc43800,0x8fc47a6a,0x0,0x0,0x0,0x0,0x0,0x8fc47a6a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x8fc47a6a,0x0,0x28,0x28,0xc40000,0x8fc47a6a,0x0,0x0,0x0,0x3800,0x7000000,0x28,0x0,0xc43800,0x0,0xc43800,0x0,0x0,0x0,0x0,0x40000,0x40000,0x8fc47a6a,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10000,0x1000000,0x400000,0x800000,0x100000,0x80000,0x200820,0xc000000,0xc000000,0xf0000000,0xf0000000,0x30,0xc0,0xc0,0x820,0x800,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x40000,0x0,0x2000,0x0,0x2000,0x0,0x40000,0x0,0x0,0x1200824,0x8,0x2000,0x8,0x2000,0xf4000000,0x1200824,0x8,0x2000,0x8,0x2000,0xf4000000,0xf0000000,0x10000000,0x40000,0x0,0x200820,0x2000,0x0,0x0,0x0,0x1200824,0xf4000000,0x8,0x2000,0x0,0x0,0x180010,0x40000,0x0,0x40000,0x0,0x600,0x600,0xf0000600,0xf0000600,0x3,0x3,0x200824,0x4,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x389,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x389,0x389,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x389,0x0,0x0,0x0,0x0,0x0,0x389,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x389,0x0,0x0,0x0,0x0,0x389,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x389,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PrismExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PrismExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrismExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PrismExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrismExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PrismExpressionParser(PrismExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PrismExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[108];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 72; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 108; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
